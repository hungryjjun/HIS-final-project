<!-- 
 * == 개정이력(Modification Information) ==
 *   
 *   수정일      			수정자           수정내용
 *  ============   	============== =======================
 *  2025. 3. 29.     	정태우            최초 생성
 *
-->
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link
	href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap"
	rel="stylesheet">

<style>
body {
	font-family: 'Roboto', sans-serif;
	margin: 0;
	padding: 0;
	background-color: #f4f6f9;
}

.container {
	width: 100%;
	max-width: 1600px;
	margin: auto;
	padding: 30px;
	background: white;
	box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
	border-radius: 12px;
}

h2 {
	text-align: center;
	font-weight: 700;
	margin-bottom: 30px;
	color: #333;
}

.summary {
	display: flex;
	justify-content: space-between;
}

.card {
	color: black;
	border-radius: 8px;
	font-size: 18px;
	font-weight: bold;
	width: 30%;
	text-align: center;
	box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.card span {
	display: block;
	font-size: 22px;
}

.accordion {
	display: flex;
	justify-content: space-between;
	gap: 20px;
	margin-bottom: 30px;
}

table {
	width: 100%;
	border-collapse: collapse;
	margin-top: 10px;
}

th, td {
	padding: 12px;
	border-bottom: 1px solid #ddd;
}

td {
	text-align: left;
	white-space: nowrap;
}
/* th는 중앙 정렬 */
th {
	background-color: #f1f1f1;
	text-align: center;
}

tr:hover {
	background-color: #f9f9f9;
}
</style>
<h3>연차 내역</h3>
<div class="container">
	<h5>
		${annualDetail[0].employee.department.departmentName}
		${annualDetail[0].employee.team.teamName}
		${annualDetail[0].employee.name}
		${annualDetail[0].employee.rank.rankName}
	</h5>
			<input type="hidden" value="${annualDetail[0].empId}" id="empId" /> 
	<h2>
		<span id="currentMonth">2025</span>
	</h2>

	<div class="summary">
		<div class="card">
			총 연차: <span id="yearTotalAnnual"> 15</span>
		</div>
		<div class="card">
			사용 연차: <span id="userAnnual"> 0</span>
		</div>
		<div class="card">
			잔여 연차: <span id="remainAnnual"> 0</span>
		</div>
	</div>
</div>
연차 사용 기간
<div>
	<select>
		<option>2023-01-01 ~ 2023-12-31</option>
		<option>2024-01-01 ~ 2024-12-31</option>
		<option>2025-01-01 ~ 2025-12-31</option>
	</select>
</div>
<div class="container">
	<div class="accordion" id="weeksAccordion">
		<table>
			<thead>
				<tr>
					<th>유형</th>
					<th>기간</th>
					<th>사용 연차</th>
					<th>사유</th>
				</tr>
			</thead>
			<tbody>
				<c:forEach items="${annualDetail}" var="x">
					<tr>
						<td>${x.annualType.annualName }</td>
						<td>${x.leaveDate ~ x.leaveEndDate}</td>
						<td></td>
						<td>${x.reason}</td>
					</tr>
				</c:forEach>
			</tbody>
			<!-- 동적으로 날짜별로 추가될 부분 -->
		</table>
	</div>
</div>
<script>
//현재 연도를 설정합니다.
function updateYear(yearOffset) {
    let currentYearText = document.getElementById('currentYear').innerText;
    let currentDate = new Date(currentYearText + '-01-01'); // 해당 연도 시작 날짜로 생성
    currentDate.setFullYear(currentDate.getFullYear() + yearOffset); // 연도 변경

    let year = currentDate.getFullYear();
    document.getElementById('currentYear').innerText = `${year}`;

    generateTables(year); // 테이블을 다시 생성하는 함수 (연도를 인자로 전달)
    updateSummary(year);   // 요약 업데이트 함수 (연도를 인자로 전달)
}


// 월 변경 이벤트
function changeMonth(offset) {
	
	let currentMonthText = document.getElementById('currentMonth').innerText;
	let currentDate = new Date(currentMonthText + "-01");  // 2025-03-01 (예시)

	currentDate.setMonth(currentDate.getMonth() + offset);  // 한 달 이동

	let year = currentDate.getFullYear();
	let month = (currentDate.getMonth() + 1).toString().padStart(2, '0');  // 0-based index이므로 +1 필요
	document.getElementById('currentMonth').innerText = `\${year}.\${month}`;
	
	let ym = `\${year}-\${month}`;
	
	let empId = document.querySelector("#empId").value;
	console.log(empId);
	console.log(ym)
    $.ajax({
        url: '/myAttendance', 
        type: 'GET',
        dataType:"json",
        data: { workDate:ym ,empId:empId },  //2025-2와 empId전달
        success: function(data) {
        	console.log(data.myAttendance)
            myAttendance = data.myAttendance;
            generateTables(year, month); // 테이블 갱신
            updateSummary(year, month); // Summary 갱신
        },
        error: function(xhr, status, error) {
            console.error("데이터 로딩 실패:", error);
        }
    });
}


// 날짜에 따라 테이블 생성
function generateTables(year, month) {
    let leftContainer = document.getElementById('weekLeft').querySelector('tbody');
    let rightContainer = document.getElementById('weekRight').querySelector('tbody');

    leftContainer.innerHTML = "";
    rightContainer.innerHTML = "";

    // 현재 월의 데이터만 필터링
    let filteredData = myAttendance
    .filter(x => x.workDate.startsWith(`\${year}-\${month}`))
    .sort((a, b) => a.workDate.localeCompare(b.workDate)); // 날짜순 정렬
    
    filteredData.forEach(x => {
        let day = parseInt(x.workDate.substring(8)); // 날짜 숫자로 변환
        let tableRow = createTableRow(x);

        if (day <= 15) {
            leftContainer.innerHTML += tableRow; // 1~15일 → 왼쪽
        } else {
            rightContainer.innerHTML += tableRow; // 16일 이후 → 오른쪽
        }
    });
}

function updateSummary(year, month) {
    let totalSeconds = 0;
    
    // 이번 달의 평일(월~금) 개수 계산
    let totalWeekdays = getWeekdaysInMonth(year, month);
    let targetWorkSeconds  = totalWeekdays * 8 * 3600; // 평일 * 8시간 * 초 단위 변환

    // 근무 데이터 합산
    myAttendance.forEach(x => {
        if (x.workDate.startsWith(`\${year}-\${month}`)) {
            let totalMinutes = (parseInt(x.workingHours) || 0) * 60 + (parseInt(x.workingMinutes) || 0);
            totalSeconds += totalMinutes * 60; // 초 단위로 변환
        }
    });

    // 초를 시간/분/초로 변환하는 함수
    function formatTime(seconds) {
        let h = Math.floor(seconds / 3600);
        let m = Math.floor((seconds % 3600) / 60);
        let s = seconds % 60;
        return `\${h}h \${m}m \${s}s`;
    }

    // 이번달 초과 시간 계산 (목표 근무 시간을 초과한 부분)
    let overtimeSeconds = Math.max(totalSeconds - targetWorkSeconds, 0);

    // 이번달 잔여 시간 계산 (목표 근무 시간에서 아직 남은 시간)
    let remainSeconds = Math.max(targetWorkSeconds - totalSeconds, 0);

    // DOM 업데이트
    document.getElementById("yearTotalAnnual").innerText = formatTime(totalSeconds);
    document.getElementById("userAnnual").innerText = formatTime(overtimeSeconds);
    document.getElementById("remainAnnual").innerText = formatTime(remainSeconds);
}

// 📌 이번 달 평일 개수 계산 함수
function getWeekdaysInMonth(year, month) {
    let count = 0;
    let daysInMonth = new Date(year, month, 0).getDate(); // 해당 월의 총 일수

    for (let day = 1; day <= daysInMonth; day++) {
        let date = new Date(year, month - 1, day); // JS에서 month는 0부터 시작
        let dayOfWeek = date.getDay(); // 0(일요일) ~ 6(토요일)

        if (dayOfWeek >= 1 && dayOfWeek <= 5) { // 월~금 (1~5)
            count++;
        }
    }
    return count;
}

// 각 날짜에 대해 테이블 행 생성
var myAttendance = [];

<c:forEach items="${myAttendance}" var="x">
myAttendance.push({
    workDate: "${x.workDate}",
    workStartTime: "${x.workStartTime}",
    workEndTime: "${x.workEndTime}",
    workingHours: "${x.workingHours}",
    workingMinutes: "${x.workingMinutes}",
    overtimeHours: "${x.overtimeHours}",
    overtimeMinutes: "${x.overtimeMinutes}",
    nightWorkHours: "${x.nightWorkHours}",
    nightWorkMinutes: "${x.nightWorkMinutes}"
});
</c:forEach>;

function createTableRow(x) {
	 let workStartTime = x.workStartTime ? x.workStartTime.substring(0, 5) : 'N/A';  // 'N/A'는 기본값
	    let workEndTime = x.workEndTime ? x.workEndTime.substring(0, 5) : 'N/A';  // 'N/A'는 기본값
	    let workDate = x.workDate ? x.workDate.substring(8) : 'N/A';  // 'N/A'는 기본값
    let workingHours = x.workingHours || '0';
    let workingMinutes = x.workingMinutes || '0';
    let overtimeHours = x.overtimeHours || '0';
    let overtimeMinutes = x.overtimeMinutes || '0';
    let nightWorkHours = x.nightWorkHours || '0';
    let nightWorkMinutes = x.nightWorkMinutes || '0';
	
    //숫자 변환 
	let NumworkingHours = parseInt(x.workingHours) || 0;
	let NumovertimeHours = parseInt(x.overtimeHours) || 0;
	let NumnightWorkHours = parseInt(x.nightWorkHours) || 0;
	let NumworkingMinutes = parseInt(x.workingMinutes) || 0;
	let NumovertimeMinutes = parseInt(x.overtimeMinutes) || 0;
	let NumnightWorkMinutes = parseInt(x.nightWorkMinutes) || 0;
	
    // 🔹 총 근무시간 계산 (기본 + 연장 + 야간)
    let totalMinutes = (NumworkingHours + NumovertimeHours + NumnightWorkHours) * 60 + (NumworkingMinutes + NumovertimeMinutes + NumnightWorkMinutes);
    let totalHours = Math.floor(totalMinutes / 60);
    let totalResultinutes = totalMinutes % 60;
    
    return `
        <tr>
            <td>\${workDate} </td>
            <td>\${workStartTime}</td>
            <td>\${workEndTime}</td>
            <td>\${totalHours}시간 \${totalResultinutes}분</td>
            <td>기본 \${workingHours}시간 \${workingMinutes}분 / 연장 \${overtimeHours}시간 \${overtimeMinutes}분 / 야간 \${nightWorkHours}시간 \${nightWorkMinutes}분</td>
        </tr>
    `;
}

// 초기 페이지 로드 시 월 설정
document.addEventListener('DOMContentLoaded', function() {
    updateMonth(0);  // 현재 월로 초기화
});


</script>