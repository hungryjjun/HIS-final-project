<!--
 * == 개정이력(Modification Information) ==
 *
 *   수정일      			수정자           수정내용
 *  ============   	============== =======================
 *  2025. 3. 13.     	 KHS           최초 생성
 *
-->
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>팀 수정</title>
</head>
    <h2>팀 수정</h2>
    <form action="${pageContext.request.contextPath}/team/update/commit" method="post">
        <!-- 팀 ID는 수정하지 않으므로 hidden -->
        <input type="hidden" name="teamId" value="${team.teamId}" />

        <!-- 부서 정보: 드롭다운으로 모든 부서 목록을 출력 -->
        <div>
            <label>부서:</label>
            <select name="departmentId" required>
			    <c:forEach var="department" items="${departmentList}">
			        <option value="${department.departmentId}"
			            <c:if test="${department.departmentId eq team.department.departmentId}">
			                selected="selected"
			            </c:if>>
			            ${department.departmentName}
			        </option>
			    </c:forEach>
			</select>
        </div>

        <!-- 팀 이름 -->
        <div>
            <label>팀 이름:</label>
            <input type="text" name="teamName" value="${team.teamName}" required/>
        </div>

        <div>
            <label for="teamName">팀 전화번호:</label>
            <input type="text" id="teamName" name="teamPhonenumber" required/>
        </div>

        <div>
            <label for="teamName">팀 팩스번호(일단 선택사항):</label>
            <input type="text" id="teamName" name="teamFaxnumber"/>
        </div>

        <a href="${pageContext.request.contextPath}/team/detail?teamId=${team.teamId}" class="btn btn-primary" style="vertical-align: middle;">상세보기로</a>
		<div class="button-container" style="display: flex; justify-content: flex-end; gap: 10px;">
			<button type="submit" class="btn btn-primary">수정완료</button>
		</div>

        <!-- 이제 필요 없어!!! -->
        <!-- 팀 멤버 정보 -->
<!--         <h3>팀원 정보</h3> -->
<!--         <div id="teamMembers"> -->
<%-- 		    <c:forEach var="member" items="${team.teamMembers}" varStatus="status"> --%>
<!-- 		        <div class="teamMember"> -->
<%-- 		            <input type="hidden" name="tminfo_${status.index}_id" value="${member.tmId}" /> --%>
<%-- 		            <input type="hidden" name="tminfo_${status.index}_teamId" value="${team.teamId}" /> --%>

<!-- 		            <label>팀원 구분:</label> -->
<%-- 		            <select name="teamMembers[${status.index}].tmHr" required> --%>
<%-- 		                <option value="팀장" ${member.tmHr eq '팀장' ? 'selected' : ''}>팀장</option> --%>
<%-- 		                <option value="팀원" ${member.tmHr eq '팀원' ? 'selected' : ''}>팀원</option> --%>
<!-- 		            </select> -->

<!-- 		            <label>팀원 ID:</label> -->
<%-- 		            <input type="text" value="${member.tmId}" readonly /> --%>
<!-- 		            <button type="button" id="btnUpdateMember" onclick="updateMember(this)">수정</button> -->
<!-- 		            <button type="button" id="btnDeleteMember" onclick="deleteMember(this)">삭제</button> -->
<!-- 		        </div> -->
<%-- 		    </c:forEach> --%>
<!-- 		</div> -->

<!--         새로운 팀원 추가 버튼 -->
<!--         <button type="button" id="btnAddMember" onclick="addMember()">팀원 추가...</button> -->


    </form>
	${team.teamMembers }
<script>

	let memberIndex = ${fn:length(team.teamMembers)};

	function addMember() {
	    const teamMembersDiv = document.getElementById('teamMembers');
	    const currentIndex = memberIndex; // 현재 인덱스를 로컬 변수에 저장

	    // 새로운 팀원 컨테이너 생성
	    const newMemberDiv = document.createElement('div');
	    newMemberDiv.className = 'teamMember';

	    // 팀 ID hidden 필드
	    const teamIdInput = document.createElement('input');
	    teamIdInput.type = 'hidden';
	    teamIdInput.name = `tminfo_${currentIndex}_teamId`;
	    teamIdInput.value = document.querySelector('input[name="teamId"]').value;
	    newMemberDiv.appendChild(teamIdInput);

	    // 팀원 구분 select 필드

	    const tmHrSelect = document.createElement('select');
	    tmHrSelect.name = `teamMembers[${currentIndex}].tmHr`;
	    tmHrSelect.required = true;
	    const option1 = document.createElement('option');
	    option1.value = '팀장';
	    option1.textContent = '팀장';
	    tmHrSelect.appendChild(option1);
	    const option2 = document.createElement('option');
	    option2.value = '팀원';
	    option2.textContent = '팀원';
	    tmHrSelect.appendChild(option2);
	    newMemberDiv.appendChild(tmHrSelect);

	    // 팀원 ID 입력 필드
	    const tmIdInput = document.createElement('input');
	    tmIdInput.type = 'text';
	    tmIdInput.name = `tminfo_${currentIndex}_id`;
	    tmIdInput.required = true;
	    newMemberDiv.appendChild(tmIdInput);

	    // 추가 버튼 (적용 버튼)
	    const addTeamButton = document.createElement('button');
	    addTeamButton.type = 'button';
	    addTeamButton.textContent = '적용';

	    // 취소 버튼
	    const cancelTeamButton = document.createElement('button');
	    cancelTeamButton.type = 'button';
	    cancelTeamButton.textContent = '취소';

// 	    인덱스 파라미터 없이 호출; 함수 내부에서 현재 인덱스(currentIndex)를 참조함.
	    addTeamButton.onclick = function() {
	        addTeamMember(currentIndex);
	    };

	    cancelTeamButton.onclick = function() {
	        // 취소 버튼을 누르면 해당 새 팀원 컨테이너(newMemberDiv)를 삭제합니다.
	        newMemberDiv.remove();
	        // 필요하다면 팀원 추가 버튼도 다시 보이도록 처리
	        $("#btnAddMember").show();
	    };

	    newMemberDiv.appendChild(addTeamButton);
	    newMemberDiv.appendChild(cancelTeamButton);
	    teamMembersDiv.appendChild(newMemberDiv);

	    // 인덱스 증가
	    memberIndex++;

	    $("#btnAddMember").hide();
	}

	function addTeamMember(index) {
	    console.log("addTeamMember 호출, index:", index);
	    const tmIdElement = document.querySelector(`input[name="tminfo_${index}_id"]`);
	    if (!tmIdElement) {
	        console.error(`input[name="tminfo_${index}_id"] 요소를 찾지 못했습니다.`);
	        return;
	    }
	    const tmId = tmIdElement.value;
	    const tmHrElement = document.querySelector(`select[name="teamMembers[${index}].tmHr"]`);
	    if (!tmHrElement) {
	        console.error(`select[name="teamMembers[${index}].tmHr"] 요소를 찾지 못했습니다.`);
	        return;
	    }
	    const tmHr = tmHrElement.value;
// 	    const teamId = document.querySelector('input[name="teamId"]').value;

	    const urlParams = new URLSearchParams(window.location.search);
	    const teamId = urlParams.get('teamId');

	    $.ajax({
	        url: "/team/updateTeamMember",
	        type: "GET",
	        data: {
	            tmId: tmId,
	            tmHr: tmHr,
	            teamId: teamId,
	        },
	        dataType: "json",
	        success: function(data) {
	            console.log(data.cnt);
	            if (data.cnt == 1) {
	                alert("팀원 추가가 성공적으로 완료되었습니다.");
	                // teamId가 data에서 넘어온다고 가정
	                window.location.href = "/team/update?teamId=" + teamId;  // 팀 수정 페이지로 리다이렉트
	            } else {
	                alert("팀원 추가 중 오류가 발생했습니다.");
	                window.location.href = "/team/update?teamId=" + teamId;  // 팀 수정 페이지로 리다이렉트
	            }
	        },
	        error: function() {
	            alert("데이터를 불러오는 중 오류가 발생했습니다.");
	        }

	    });
	}

	// 팀원 수정 버튼 클릭 시 해당팀에 이미 있는 팀원 id의 팀원 여부를 바꾸는 함수
	function updateMember(button) {
	    const teamMemberDiv = button.closest('.teamMember');
	    const tmIdInput = teamMemberDiv.querySelector('input[name^="tminfo_"][name$="_id"]');
	    const tmId = tmIdInput.value; // ✅ data 속성이 아닌 value에서 직접 추출
	    const teamId = document.querySelector('input[name="teamId"]').value;

	    $.ajax({
	        url: "/teamMember/delete/" + teamId + "/" + tmId,  // 동적으로 teamId와 tmId를 URL 경로에 삽입
	        type: "GET",
	        success: function(data) {
	            if (data.success) {
	                alert(data.message);
	                teamMemberDiv.remove(); // 삭제 성공 시 해당 팀원 요소 제거
	            } else {
	                alert(data.message); // 삭제 실패 시 메시지 표시
	            }
	        },
	        error: function() {
	            alert("데이터를 불러오는 중 오류가 발생했습니다.");
	        }
	    });
	}

	// 팀원 삭제 버튼 클릭 시 해당팀에 이미 있는 팀원 id를 db에서 지우는 함수
	function deleteMember(button) {
	    const teamMemberDiv = button.closest('.teamMember');
	    const tmIdInput = teamMemberDiv.querySelector('input[name^="tminfo_"][name$="_id"]');
	    const tmId = tmIdInput.value; // ✅ data 속성이 아닌 value에서 직접 추출
	    const teamId = document.querySelector('input[name="teamId"]').value;

	    $.ajax({
	        url: "/teamMember/delete/" + teamId + "/" + tmId,  // 동적으로 teamId와 tmId를 URL 경로에 삽입
	        type: "GET",
	        success: function(data) {
	            if (data.success) {
	                alert(data.message);
	                teamMemberDiv.remove(); // 삭제 성공 시 해당 팀원 요소 제거
	            } else {
	                alert(data.message); // 삭제 실패 시 메시지 표시
	            }
	        },
	        error: function() {
	            alert("데이터를 불러오는 중 오류가 발생했습니다.");
	        }
	    });
	}

    // 팀원추가를 클릭해서 생긴 팀원 id입력필드를 지우는 함수
	function removeMember(button) {
	    const teamMemberDiv = button.closest('.teamMember');
	    teamMemberDiv.remove();
	}

</script>

