document.addEventListener("DOMContentLoaded", async function() {
  // -----------------------------
  // [예시] 로그인한 사용자 ID를 가져오는 함수
  // (실제 구현은 프로젝트에 맞게 수정)
  async function getLoggedInUserId() {
    try {
      const resp = await axios.get(window.contextPath + "/approvalProcess/getApproverId");
      return resp.data; // 예: "2025031903"
    } catch (error) {
      console.error("로그인 사용자 ID 조회 실패:", error);
      return null;
    }
  }

  // -----------------------------
  // 공통 함수: URL query parameter
  // -----------------------------
  function getQueryParam(param) {
    var urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
  }

  // -----------------------------
  // 공통 함수: 연차 옵션 처리
  // -----------------------------
  function fillAnnualCodeOptionsEmbedded() {
    var select = document.getElementById("annualCode");
    if (!select) return;
    
    var options = window.annualOptions || [];
    select.innerHTML = "";
    var defaultOption = document.createElement("option");
    defaultOption.value = "";
    defaultOption.text = "선택하세요";
    select.appendChild(defaultOption);
    
    options.forEach(function(opt) {
      var option = document.createElement("option");
      option.value = opt.cd;
      option.text = opt.nm;
      select.appendChild(option);
    });
  }

  async function loadAnnualCodeOptionsFromAPI() {
    try {
      var contextPath = window.contextPath || "";
      const response = await axios.get(contextPath + "/resources/data/annualOptions.json");
      return response.data;
    } catch (error) {
      console.error("연차 옵션 불러오기 실패:", error);
      return [];
    }
  }

  async function fillAnnualCodeOptionsFromAPI() {
    var select = document.getElementById("annualCode");
    if (!select) return;
    
    var options = await loadAnnualCodeOptionsFromAPI();
    select.innerHTML = "";
    
    var defaultOption = document.createElement("option");
    defaultOption.value = "";
    defaultOption.text = "선택하세요";
    select.appendChild(defaultOption);
    
    options.forEach(function(opt) {
      var option = document.createElement("option");
      option.value = opt.cd;
      option.text = opt.nm;
      select.appendChild(option);
    });
  }

  // -----------------------------
  // 결재 선택(select) 변경 이벤트: 승인/반려/보류 선택 시 결재 사유 textarea 자동 채우기
  // -----------------------------
  var actionSelect = document.getElementById("approvalAction");
  if (actionSelect) {
    actionSelect.addEventListener('change', function() {
      var aprReasonElem = document.getElementById("aprReason");
      if (!aprReasonElem) return;
      
      var action = actionSelect.value;
      if (action === "승인") {
        aprReasonElem.value = "사유가 적합하므로 승인";
      } else if (action === "반려") {
        aprReasonElem.value = "사유가 부적합하므로 반려";
      } else if (action === "보류") {
        aprReasonElem.value = "전산에 문제 생겨 보류";
      } else {
        aprReasonElem.value = "";
      }
    });
  }

  // -----------------------------
  // 결재 버튼 이벤트: 승인/반려/보류 (확인창 및 기본값 세팅)
  // -----------------------------
  document.getElementById("success").addEventListener('click', function(){
    const aprReasonElem = document.getElementById("aprReason");
    // 1) textarea가 비어 있다면 기본값 세팅
    if (aprReasonElem && !aprReasonElem.value.trim()) {
      aprReasonElem.value = "사유가 적합하므로 승인";
    }
    
    if (!confirm("승인하시겠습니까?")) return;
    
    let draftData = {
      draftId: document.querySelector("#draftId").value,
      approverId: document.querySelector("#approverId").value,
      aprStatus: "승인",
      aprReason: aprReasonElem ? aprReasonElem.value : ""
    };
    
    axios.post("/approval/draft/approve", draftData)
      .then(resp => {
        alert("결재 승인 완료!");
		location.reload();
      })
      .catch(error => {
        console.error("결재 승인 실패:", error.response ? error.response.data : error);
        alert("결재 승인 실패했습니다. 서버 로그를 확인하세요.");
      });
  });
  
  document.getElementById("reject").addEventListener('click', function() {
    const aprReasonElem = document.getElementById("aprReason");
    // 1) textarea가 비어 있다면 기본값 세팅
    if (aprReasonElem && !aprReasonElem.value.trim()) {
      aprReasonElem.value = "사유가 부적합하므로 반려";
    }
    
    if (!confirm("반려하시겠습니까?")) return;
    
    let draftData = {
      draftId: document.querySelector("#draftId").value,
      approverId: document.querySelector("#approverId").value,
      aprStatus: "반려",
      aprReason: aprReasonElem ? aprReasonElem.value : ""
    };
    
    axios.post("/approval/draft/reject", draftData)
      .then(resp => {
        alert("결재 반려 완료!");
		location.reload();
      })
      .catch(error => {
        console.error("결재 반려 실패:", error.response ? error.response.data : error);
        alert("결재 반려 실패했습니다. 서버 로그를 확인하세요.");
      });
  });
  
  document.getElementById("hold").addEventListener('click', function(){
    const aprReasonElem = document.getElementById("aprReason");
    // 1) textarea가 비어 있다면 기본값 세팅
    if (aprReasonElem && !aprReasonElem.value.trim()) {
      aprReasonElem.value = "전산에 문제 생겨 보류";
    }
    
    if (!confirm("보류하시겠습니까?")) return;
    
    let draftData = {
      draftId: document.querySelector("#draftId").value,
      approverId: document.querySelector("#approverId").value,
      aprStatus: "보류",
      aprReason: aprReasonElem ? aprReasonElem.value : ""
    };
    
    axios.post("/approval/draft/hold", draftData)
      .then(resp => {
        alert("결재 보류 완료!");
		location.reload();
      })
      .catch(error => {
        console.error("결재 보류 실패:", error.response ? error.response.data : error);
        alert("결재 보류 실패했습니다. 서버 로그를 확인하세요.");
      });
  });

  // -----------------------------
  // 기안 문서 상세 정보 조회
  // -----------------------------
  async function loadDraftDetail() {
    var draftId = getQueryParam("draftId");
    if (!draftId) {
      document.getElementById("detailContainer").innerHTML = "<p>문서 ID가 없습니다.</p>";
      return;
    }

    // 1) 현재 로그인한 결재자 ID 조회
    const loggedInUserId = await getLoggedInUserId();
    if (!loggedInUserId) {
      console.warn("로그인 사용자 ID를 알 수 없습니다.");
    }

    // 2) 서버에서 draftId에 해당하는 결재자 목록 조회 (List<DraftApproverVO>)
    var contextPath = window.contextPath || "";
    var apiUrl = contextPath + "/approval/draft/detail?draftId=" + draftId;
    try {
      const response = await axios.get(apiUrl);
      const draftList = response.data; // 배열

      if (!draftList || draftList.length === 0) {
        document.getElementById("detailContainer").innerHTML = "<p>문서 데이터가 없습니다.</p>";
        return;
      }

      // 공통 문서 정보: 첫 번째 객체
      const docInfo = draftList[0];

      // -----------------------------
      // 현재 로그인한 결재자의 정보 찾기
      // -----------------------------
      const myApprover = draftList.find(item => item.approverId == loggedInUserId);
      if (myApprover) {
        document.getElementById("approverId").value = myApprover.approverId;
        document.getElementById("aprStatus").value = myApprover.aprStatus || "";
      } else {
        console.warn("현재 로그인 사용자는 결재자 목록에 없습니다.");
        document.getElementById("approverId").value = "";
        document.getElementById("aprStatus").value = "";
      }

      // 공통 문서 ID 세팅
      document.getElementById("draftId").value = docInfo.draftId;

      // -----------------------------
      // 연차 신청서 폼 로드 & 데이터 채우기
      // -----------------------------
      await loadAnnualFormHtml();
      await fillAnnualCodeOptionsFromAPI();
      loadAnnualForm(docInfo);

      // -----------------------------
      // 결재 라인 정보 표시 (문서 공통 정보 기준)
      // -----------------------------
      let detailHtml = `
         <h4>결재 라인</h4>
         <div><strong>문서제목:</strong> ${docInfo.draftTitle}</div>
         <div><strong>기안자:</strong> ${docInfo.draftEmpName}</div>
         <div><strong>결재자(첫번째):</strong> ${docInfo.approverName}</div>
         <div><strong>결재 순번:</strong> ${docInfo.aprSeq}</div>
         <div><strong>결재 상태:</strong> ${docInfo.aprStatus}</div>
         <div><strong>승인 여부:</strong> ${docInfo.aprYn === 'N' ? "미결" : "완료"}</div>
         <div><strong>결재 사유:</strong> ${docInfo.aprReason || "-"}</div>
         <div><strong>결재 일시:</strong> ${docInfo.aprDate || "-"}</div>
      `;
      document.getElementById("detailContainer").innerHTML = detailHtml;

      // 결재자 목록 테이블 전체 표시
      fillApprovers(draftList);

    } catch (error) {
      console.error("문서 상세 정보 불러오기 실패:", error);
      document.getElementById("detailContainer").innerHTML = "<p>문서 상세 정보를 불러오는데 실패했습니다.</p>";
    }
  }

  // -----------------------------
  // 연차신청서 폼 로드 & 데이터 매핑
  // -----------------------------
  async function loadAnnualFormHtml() {
    try {
      console.log("연차 신청서 폼 로드 시작");
      var contextPath = window.contextPath || "";
      const resp = await axios.get(contextPath + "/resources/html/approval/approval1_1.html");
      document.getElementById("annualFormContainer").innerHTML = resp.data;
      console.log("연차 신청서 폼 로드 완료");
    } catch (err) {
      console.error("연차 신청서 폼 로드 실패:", err);
      document.getElementById("annualFormContainer").innerHTML = "<p>폼을 불러오는 데 실패했습니다.</p>";
    }
  }

  function extractDateString(dbDateString) {
    if (!dbDateString) return "";
    return dbDateString.split(" ")[0];
  }

  function loadAnnualForm(docInfo) {
    const pureLeaveDate = extractDateString(docInfo.leaveDate);
    const pureLeaveEndDate = extractDateString(docInfo.leaveEndDate);
    const pureDraftDate = extractDateString(docInfo.draftDate);

    const nameFields = [
      { name: "draftUser",   value: docInfo.draftEmpName },
      { name: "draftDept",   value: docInfo.draftDepartment },
      { name: "draftDate",   value: pureDraftDate },
      { name: "docNo",       value: docInfo.draftId },
      { name: "leaveDate",   value: pureLeaveDate },
      { name: "leaveEndDate",value: pureLeaveEndDate },
      { name: "annualCode",  value: docInfo.annualCode || "" }
    ];

    nameFields.forEach(field => {
      const element = document.getElementsByName(field.name)[0];
      if (element) {
        if (element.tagName === 'SELECT') {
          if (Array.isArray(docInfo[field.name])) {
            let optionlist = docInfo[field.name];
            let txt = '<option value="">선택하세요</option>\n';
            for (let i = 0; i < optionlist.length; i++) {
              let code = optionlist[i].cd;
              let codename = optionlist[i].nm;
              txt += `<option value="${code}">${codename}</option>\n`;
            }
            element.innerHTML = txt;
            if (docInfo.hasOwnProperty(field.name + "Value")) {
              element.value = docInfo[field.name + "Value"];
            }
          } else {
            element.value = field.value;
          }
        } else {
          element.value = field.value || "";
        }
      }
    });

    // CKEditor (reason) 데이터 채우기 (옵션)
    if (document.getElementsByName("reason")[0]) {
      if (window.CKEDITOR && CKEDITOR.instances.reason) {
        CKEDITOR.instances.reason.setData(docInfo.reason || "");
      } else {
        document.getElementsByName("reason")[0].value = docInfo.reason || "";
      }
    }
  }

  // -----------------------------
  // 결재자 목록 테이블 표시
  // -----------------------------
  function fillApprovers(draftList) {
    const approverTableBody = document.getElementById("approverTableBody");
    if (!approverTableBody) return;
    approverTableBody.innerHTML = "";
    draftList.forEach(function(approver) {
      let row = document.createElement("tr");
      row.innerHTML = `
        <td style='text-align:center;'>${approver.approverName}</td>
        <td style='text-align:center;'>${approver.aprSeq}</td>
        <td style='text-align:center;'>${approver.aprStatus}</td>
      `;
      approverTableBody.appendChild(row);
    });
  }

  // -----------------------------
  // 페이지 로드 시점에 기안 문서 데이터 불러오기
  // -----------------------------
  var draftId = getQueryParam("draftId");
  if (draftId) {
    loadDraftDetail();
  } else {
    document.getElementById("detailContainer").innerHTML = "<p>문서 ID가 없습니다.</p>";
  }
});