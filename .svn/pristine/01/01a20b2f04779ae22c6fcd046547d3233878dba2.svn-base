package kr.or.ddit.file.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.file.service.FileInfoService;
import kr.or.ddit.file.vo.FileDetailVO;
import kr.or.ddit.file.vo.FileInfoVO;
import kr.or.ddit.file.vo.FileVO;

/**
 * 
 * @author CHOI
 * @since 2025. 3. 12.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) > >
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 12.     	CHOI	         최초 생성
 *  2025. 3. 14         CHOI 			파일 뷰어 기능 추가 
 *
 * </pre>
 */
@RestController
@RequestMapping("/file")
public class FileController {
    
    @Autowired
    private FileInfoService fileService;

    @Autowired
    private FileInfoVO fileInfoVO; //파일 properties 셋팅 값 주입
    /**
     * 다중 파일 업로드
     * @param files 업로드한 파일 배열
     * @return 업로드된 파일 ID 리스트
     */
    @PostMapping("upload")
    public ResponseEntity<List<Long>> uploadFiles(@RequestParam("files") MultipartFile[] files) {
        List<Long> fileIds;
        try {
            // 파일 업로드 및 DB에 삽입
            fileIds = fileService.saveFiles(files);
            return ResponseEntity.ok(fileIds);
        } catch (Exception e) {
            // 업로드 실패 시 400
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * 파일 다운로드
     * @param fileId 다운로드할 파일의 ID
     * @return 다운로드 가능한 파일 데이터
     */
    @GetMapping("download/{detailId}") // detailId -> fileId로 수정
    public ResponseEntity<Resource> downloadFile(@PathVariable("detailId") Long detailId) {

        try {
            FileDetailVO fileDetail = fileService.getFileById(detailId); // detailId -> fileId로 수정
            Path filePath = Paths.get(fileDetail.getFilePath());
            Resource resource = new UrlResource(filePath.toUri());

            // 다운로드 성공했을 때 타입 지정 -> header body 형성
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + fileDetail.getFileName() + "\"")
                    .body(resource);

        } catch (Exception e) {
            // 다운로드 실패 시 -> 404 에러
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * 파일 삭제 (논리적 삭제) -> 공통적으로 쓰임
     * @param fileId 삭제 파일 ID
     * @return
     */
    @DeleteMapping("delete/{fileId}") // detailId -> fileId로 수정
    public ResponseEntity<String> deleteFile(@PathVariable("fileId") Long fileId) {

        try {
            fileService.deleteFile(fileId); // detailId -> fileId로 수정
            return ResponseEntity.ok("파일 삭제 성공");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("파일 삭제 실패");
        }
    }

    /**
     * 업로드된 파일 리스트
     * @return
     */
    @GetMapping("list")
    public ResponseEntity<List<FileDetailVO>> getAllFiles() {
        return ResponseEntity.ok(fileService.getAllFiles());
    }
    
    
    
    /**
     * 이미지 파일 제공 컨트롤러 (설정값 활용)
     * @param fileName 파일명
     * @param response HTTP 응답
     * @throws IOException
     */
    @GetMapping("view/{fileName}")
    public void viewFile(@PathVariable("fileName") String fileName, HttpServletResponse response) throws IOException {
        // 설정값에서 파일 저장 경로 가져오기
        String uploadDir = fileInfoVO.getFileImages();
        Path filePath = Paths.get(uploadDir, fileName);

        File file = filePath.toFile();
        if (!file.exists()) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        response.setContentType(Files.probeContentType(filePath));
        Files.copy(filePath, response.getOutputStream());
        response.getOutputStream().flush();
    }

    
}
