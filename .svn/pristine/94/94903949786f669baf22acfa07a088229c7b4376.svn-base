package kr.or.ddit.account.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import kr.or.ddit.account.service.AccountService;
import kr.or.ddit.account.vo.AccountVO;
import kr.or.ddit.attendance.service.AttendanceService;
import kr.or.ddit.attendance.vo.AttendanceVO;
import kr.or.ddit.messenger.service.ChatEmpService;
import kr.or.ddit.security.SecurityUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * 
 * @author youngjun
 * @since 2025. 3. 12.
 * @see
 *
 *      <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일               수정자           수정내용
 *  -----------      -------------    ---------------------------
 *  2025. 3. 12.        youngjun             최초 생성
 *  2025. 3. 14.        태우                     로그인 후 컨텐츠 안에서 동적인 현재 시간 받아오기 위함
 *  2025. 3. 14.        규				  로그인 후 실시간 ChatEmp 상태 온라인 설정
 *      </pre>
 */
@Slf4j
@Controller
@RequestMapping("/account/login")
@RequiredArgsConstructor
public class AccountLoginController {

	@Autowired
	private AccountService service;
	@Autowired
	private ChatEmpService cservice;
	private final SimpMessagingTemplate msgTemplate;
	@Autowired
	private AttendanceService Aservice;

	@GetMapping("/home")
   public String accountLogin(Model model) throws ParseException {
	   AccountVO sessionAccount  = SecurityUtil.getrealUser();
	   if(sessionAccount ==null ) {
		   return "redirect:/";
	   }
	   String empId = sessionAccount.getEmpId();
	   AttendanceVO Attendance = Aservice.findTodayAttendance(empId);
	   
	   if(Attendance == null) {
		   AttendanceVO asd = new AttendanceVO();
		   asd.setStatusId("A002");
		   model.addAttribute("workStatus",asd);
		   model.addAttribute("workStatusList",Aservice.workStatusList()); 
		   return "tiles:mazer/content";
	   }
	   
	   String workStartTime = Attendance.getWorkStartTime();
	   String workEndTime = Attendance.getWorkEndTime();
	   
	   // null 체크
	    SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    String formattedStartTime = null;
	    String formattedEndTime = null;
	    
	    if (workStartTime != null) {
	        Date startDate = inputFormat.parse(workStartTime);
	        SimpleDateFormat outputFormat = new SimpleDateFormat("HH:mm");
	        formattedStartTime = outputFormat.format(startDate); // 시간 부분만 추출
	    }
	    
	    if (workEndTime != null) {
	        Date endDate = inputFormat.parse(workEndTime);
	        SimpleDateFormat outputFormat = new SimpleDateFormat("HH:mm");
	        formattedEndTime = outputFormat.format(endDate); // 시간 부분만 추출
	    }
	    
	    Attendance.setWorkStartTime(formattedStartTime);
	    Attendance.setWorkEndTime(formattedEndTime);
	    
	   List<AttendanceVO> AttendanceList = new ArrayList<>();
	   AttendanceList.add(Attendance);
	   sessionAccount.setAttendance(AttendanceList);
	   log.info("========={}",Aservice.workStatusEmployee(empId));
	   model.addAttribute("workStatus",Aservice.workStatusEmployee(empId));
	   model.addAttribute("workStatusList",Aservice.workStatusList()); 
      return "tiles:mazer/content";
   }

	@GetMapping("/")
	public String accountLogout() {
		return "redirect:/account/accountLoginForm";
	}
}
