/**
 * 템플릿(HTML 양식) 불러오기 + 데이터 자동 삽입
 */
async function loadTemplate(templateId) {
    try {
        const response = await axios.get(`/approval/template/${templateId}`);
        const file = response.data;

        if (!file.detailId) {
            throw new Error("detailId가 존재하지 않습니다.");
        }

        let filePath = `/file/download/${file.detailId}`;

        console.log(" 다운로드할 파일 경로:", filePath);

        // 다운로드 버튼에 링크 설정
        const downloadBtn = document.getElementById("downloadButton");
        if (downloadBtn) {
            downloadBtn.setAttribute("href", filePath);
            downloadBtn.setAttribute("download", `template_${templateId}.html`);
        }

        // HTML 파일 다운로드 및 파싱
        const htmlResponse = await axios.get(filePath);
        console.log(" 불러온 HTML:", htmlResponse.data);

        // 다운로드된 HTML을 DOM으로 변환
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlResponse.data, "text/html");

        const formElement = doc.querySelector("form");
        if (!formElement) {
            throw new Error(" 불러온 HTML에 <form> 태그가 없습니다.");
        }

        // 모달 내부 컨테이너에 HTML 삽입
        document.getElementById("approvalFormContainer").innerHTML = doc.body.innerHTML;

        // CKEditor 재초기화
        reinitializeCKEditor();

        // 데이터 채우기
        await fillFormData(templateId);

        // 폼 초기화 (이벤트 리스너 등 추가)
        initApprovalForm();

    } catch (error) {
        console.error("템플릿 로드 오류:", error);
        alert("템플릿을 불러오는 중 오류가 발생했습니다: " + error.message);
    }
}

/**
 * 폼 관련 초기화 (이벤트 바인딩 등)
 */
function initApprovalForm() {
    // 예시: 상신 버튼 클릭 이벤트
    const submitBtn = document.querySelector("#submitApprovalBtn");
    if (submitBtn) {
        submitBtn.addEventListener("click", submitApprovalForm);
    } else {
        console.warn("상신 버튼(#submitApprovalBtn)을 찾을 수 없습니다.");
    }
}

/**
 * 불러온 HTML 템플릿 내부의 데이터를 자동으로 채우기
 */
async function fillFormData(templateId) {
    try {
        const response = await axios.get(`/approval/draft/data/${templateId}`);
        const draftData = response.data;
        
        // input, textarea, select를 순회하며 draftData 매핑
        document.querySelectorAll("#approvalFormContainer input, #approvalFormContainer textarea, #approvalFormContainer select")
        .forEach(obj => {
            const name = obj.getAttribute("name");
            
            if (name && draftData.hasOwnProperty(name)) {
                if (obj.type === "checkbox") {
                    obj.checked = draftData[name] === true || draftData[name] === "Y";
                } else if (obj.type === "date") {
                    obj.value = draftData[name] ? draftData[name].split("T")[0] : "";
                } else if (obj.tagName === "SELECT") {
                    // 셀렉트 박스에 여러 option 추가
                    // draftData[name]이 [{cd, nm}, ...] 구조라고 가정
                    let optionlist = draftData[name];
                    let txt = '<option value="">선택하세요</option>\n';
                    for (let i = 0; i < optionlist.length; i++) {
                        let code = optionlist[i].cd;
                        let codename = optionlist[i].nm;
                        txt += `<option value="${code}">${codename}</option>\n`;
                    }
                    obj.innerHTML = txt;
                } else {
                    // 일반 input, textarea
                    obj.value = draftData[name];
                }
            }
        });

        // CKEditor 내용 삽입 (templateContent 필드를 사용한다고 가정)
        if (draftData.templateContent && CKEDITOR.instances) {
            if (CKEDITOR.instances['draftContent']) {
                CKEDITOR.instances['draftContent'].setData(draftData.templateContent);
            }
        }

    } catch (error) {
        console.error("문서 데이터 로드 실패:", error);
        alert("문서 데이터를 불러오는 데 실패했습니다.");
    }
}

/**
 * 모달 내부에 동적 HTML 삽입 후, CKEditor 재초기화 함수
 */
function reinitializeCKEditor() {
    document.querySelectorAll("#approvalFormContainer textarea").forEach((textarea, idx) => {
        if (!textarea.id) {
            textarea.id = "draftContent_" + idx;
        }
        if (CKEDITOR.instances[textarea.id]) {
            CKEDITOR.instances[textarea.id].destroy(true);
        }
        CKEDITOR.replace(textarea.id, { versionCheck: false });
    });
}

/**
 * 상신 버튼 클릭 시 호출될 함수
 */
async function submitApprovalForm() {
    console.log("상신 버튼 클릭됨. 여기서 결재 상신 로직 처리.");
    // 여기에 실제 결재 상신 로직(axios.post 등)을 구현하거나,
    // approvalDraft.js의 submitApprovalForm() 함수를 호출하는 방식으로 연결
}
