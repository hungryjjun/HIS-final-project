/** 
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 * 2025. 3. 23.     	youngjun            최초 생성
 *
 * </pre>
 */

// 전역 차트 객체 선언
let deptChartInstance = null;
let rankChartInstance = null;

function renderCharts(deptData, rankData) {
	const deptLabels = deptData.map(item => item.name);
	const deptSalaries = deptData.map(item => item.avgSalary);

	const rankLabels = rankData.map(item => item.name);
	const rankSalaries = rankData.map(item => item.avgSalary);

	if (deptChartInstance) deptChartInstance.destroy();
	if (rankChartInstance) rankChartInstance.destroy();

	deptChartInstance = new Chart(document.getElementById('deptChart'), {
		type: 'bar',
		data: {
			labels: deptLabels,
			datasets: [{
				label: '부서별 평균 급여',
				data: deptSalaries,
				backgroundColor: 'rgba(54, 162, 235, 0.7)'
			}]
		},
		options: {
			responsive: true,
			maintainAspectRatio: false,
			scales: { y: { beginAtZero: true } }
		}
	});

	rankChartInstance = new Chart(document.getElementById('rankChart'), {
		type: 'bar',
		data: {
			labels: rankLabels,
			datasets: [{
				label: '직급별 평균 급여',
				data: rankSalaries,
				backgroundColor: 'rgba(255, 99, 132, 0.7)'
			}]
		},
		options: {
			responsive: true,
			maintainAspectRatio: false,
			scales: { y: { beginAtZero: true } }
		}
	});
}

function SalarySummary() {
	const selectedDate = document.querySelector("#payDate").value;
	if (!selectedDate) {
		alert("년월을 선택해주세요.");
		return;
	}

	const [payYear, payMonth] = selectedDate.split("-");
	const getDate = [payYear, payMonth];
	console.log("getDate",getDate);

	$.ajax({
		url: "/salary/summary",
		type: "GET",
		data: { payYear, payMonth },
		success: function (res) {
			console.log("res값", res);
			console.log("res금액", res.totalNetSalary);
			console.log("[payYear, payMonth]", [payYear, payMonth]);
			
			document.querySelector("#totalemp").innerText = `${res.totalemp}명`;
			document.querySelector("#totalNetSalary").innerText = `${res.totalNetSalary.toLocaleString()}원`;
			document.querySelector("#confirmCount").innerText = `${res.confirmedCount}명`;
			document.querySelector("#selectedDate").innerText = `${getDate[0]}년`+`${getDate[1]}월`;
			renderCharts(res.deptChartData, res.rankChartData);
		},
		error: function () {
			alert("요약 정보 조회 실패");
		}
	});

	loadSalaryList(payYear, payMonth);
}

function loadSalaryList(payYear, payMonth) {
	$.ajax({
		url: "/salary/list/data",
		type: "GET",
		data: { payYear, payMonth },
		success: function (list) {
			const tbody = document.querySelector("#table1 tbody");
			tbody.innerHTML = "";

			list.forEach(salaryVO => {
				const emp = salaryVO.employeeList[0];
				const row = `
					<tr>
						<td>${salaryVO.payYear}년${salaryVO.payMonth}월</td>
						<td data-salaryid="${salaryVO.salaryId}">${salaryVO.empId}</td>
						<td>${emp.name}</td>
						<td>${emp.department.departmentName}</td>
						<td>${emp.team.teamName}</td>
						<td>${emp.rank.rankName}</td>
						<td>${salaryVO.baseSalary}</td>
						<td>${salaryVO.totalPay}</td>
						<td>${salaryVO.totalDeduction}</td>
						<td>${salaryVO.netSalary}</td>
						<td><a href="/salary/detail/${salaryVO.empId}/${salaryVO.payYear}/${salaryVO.payMonth}">보기</a></td>
						<td>
							<button type="button" class="btn ${salaryVO.payStatus === '확정' ? 'btn-danger' : 'btn-primary'}"
								onclick="salaryStatus(this)">
								${salaryVO.payStatus}
							</button>
						</td>
						<td>${salaryVO.confirmDate ? salaryVO.confirmDate.substring(0, 10) : ''}</td>
					</tr>
				`;
				tbody.insertAdjacentHTML("beforeend", row);
			});

			//  DataTable 재초기화
			if ($.fn.DataTable.isDataTable("#table1")) {
				$("#table1").DataTable().destroy();
			}
			$("#table1").DataTable({
				pageLength: 10,
				lengthChange: false,
				searching: true,
				ordering: true,
				info: true
			});
		},
		error: function () {
			alert("급여 리스트 조회 실패");
		}
	});
}

// 초기 진입 시 실행
window.addEventListener("DOMContentLoaded", () => {
	const today = new Date();
	const yyyy = today.getFullYear();
	const mm = String(today.getMonth() + 1).padStart(2, '0');
	document.querySelector("#payDate").value = `${yyyy}-${mm}`;
	SalarySummary();
});
