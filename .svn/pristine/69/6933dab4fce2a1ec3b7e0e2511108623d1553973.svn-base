/**
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 * 2025. 3. 21.     	CHOI            최초 생성
 * 2025. 3. 23.     	CHOI            시퀀스 기반 동적 id 처리 추가
 * </pre>
 */

/**  1. 모달에서 결재 양식 HTML 로드 (AJAX 캐시 방지) */
async function openApprovalForm(templateId, templateTitle) {
    if (!templateId) {
        alert("템플릿 ID가 올바르지 않습니다.");
        return;
    }

    // 모달 타이틀 설정
    document.getElementById('approvalFormModalLabel').textContent = templateTitle + ' 결재 양식';

    // 로딩 UI 표시
    document.getElementById('approvalFormContainer').innerHTML = `
        <div class="text-center py-4">
            <div class="spinner-border text-primary"></div>
            <p class="mt-2">결재 양식을 불러오는 중입니다...</p>
        </div>
    `;

    // 모달 표시
    var modal = new bootstrap.Modal(document.getElementById('approvalFormModal'));
    modal.show();

    try {
        // 캐시 방지를 위해 timestamp 추가
        let timestamp = new Date().getTime();
        let response = await fetch(`/approval/templates/${templateId}?t=${timestamp}`);
        let htmlContent = await response.text();

        // 기존 요소 제거 후 새로운 HTML 삽입
        document.getElementById('approvalFormContainer').outerHTML = `<div id="approvalFormContainer">${htmlContent}</div>`;
		
		// (중요) 동적 테이블 초기화
		initDynamicTable();

		
		
        // 결재 데이터 불러오기 (자동 채우기)
        await loadDraftData(templateId);

    } catch (error) {
        console.error("템플릿 로드 실패:", error);
        alert("결재 양식을 불러오는 데 실패했습니다.");
    }
}

/** 2. 모달이 닫힐 때 기존 HTML 삭제 (최신 반영) */
document.getElementById('approvalFormModal').addEventListener('hidden.bs.modal', function () {
    document.getElementById('approvalFormContainer').innerHTML = "";
});

/**  3. 기안 문서 데이터 불러오기 */
async function loadDraftData(draftId) {
    try {
        const response = await axios.get(`/approval/draft/${draftId}`);
        const draft = response.data;

        console.log("불러온 문서 데이터:", draft);

        // 데이터 필드 채우기
        document.querySelector("#draftId").value = draft.draftId || ""; // 기안자 ID 자동 채우기
        document.querySelector("#templateId").value = draft.templateId || "";
        document.querySelector("#empId").value = draft.empId || "";
        document.querySelector("#draftTitle").value = draft.draftTitle || "";
        document.querySelector("#draftContent").value = draft.draftContent || "";
        document.querySelector("#draftUrgent").checked = draft.draftUrgent === "Y";
        document.querySelector("#departmentId").value = draft.departmentId || "";

        // `기안자`와 `문서번호` 자동 채우기
        document.querySelector("input[name='draftId']").value = draft.draftId || ""; // 기안자 ID 자동 채우기
        document.querySelector("input[name='docNo']").value = draft.docNo || ""; // 문서번호 자동 채우기

        // ✅ 결재자 목록 동적 추가
        fillApproverTable(draft.draftapproverList);

    } catch (error) {
        console.error("🚨 문서 불러오기 실패:", error);
        alert("문서 정보를 불러오는 데 실패했습니다.");
    }
}


/**  4. 결재자 목록 동적 추가 (시퀀스 기반 ID 처리) */
function fillApproverTable(approvers) {
    let table = document.querySelector("#approverTable");
    table.innerHTML = ""; // 기존 데이터 초기화

    approvers.forEach((approver, index) => {
        let row = table.insertRow();
        row.classList.add("approverRow");

        let cell1 = row.insertCell(0);
        let cell2 = row.insertCell(1);
        let cell3 = row.insertCell(2);
        let cell4 = row.insertCell(3);
        let cell5 = row.insertCell(4);

        const rowIdPrefix = `approverRow_${index}`; // 시퀀스를 기반으로 ID 생성

        cell1.innerHTML = `<input type="text" id="${rowIdPrefix}_aprId" class="aprId" value="${approver.aprId}" readonly>`;
        cell2.innerHTML = `<input type="text" id="${rowIdPrefix}_approverId" class="approverId" value="${approver.approverId}" readonly>`;
        cell3.innerHTML = `<input type="number" id="${rowIdPrefix}_aprSeq" class="aprSeq" value="${approver.aprSeq}" readonly>`;
        cell4.innerHTML = `<input type="text" id="${rowIdPrefix}_aprStatus" class="aprStatus" value="${approver.aprStatus}" readonly>`;
        cell5.innerHTML = `<input type="text" id="${rowIdPrefix}_aprReason" class="aprReason" value="${approver.aprReason}" readonly>`;
    });
}

/** ✅ 5. 결재 상신 */
async function submitApprovalForm() {
    const formElement = document.querySelector("#approvalFormContainer form");

    if (!formElement) {
        alert("제출할 양식을 찾을 수 없습니다.");
        return;
    }

    let draftData = {
        draftId: document.querySelector("#draftId")?.value || null,  
        templateId: document.querySelector("#templateId")?.value || "",
        empId: document.querySelector("#empId")?.value || "",
        draftTitle: document.querySelector("input[name='draftTitle']").value, // 템플릿 제목 가져오기
        draftContent: CKEDITOR.instances.draftContent ? CKEDITOR.instances.draftContent.getData() : "",
        draftUrgent: document.querySelector("#draftUrgent")?.checked ? "Y" : "N",
        departmentId: document.querySelector("#departmentId")?.value || "",
        draftapproverList: []
    };

    // 결재자 목록 동적 추가
    document.querySelectorAll(".approverRow").forEach((row, index) => {
        let approver = {
            aprId: row.querySelector(`#approverRow_${index}_aprId`)?.value || "",
            approverId: row.querySelector(`#approverRow_${index}_approverId`)?.value || "",
            aprSeq: row.querySelector(`#approverRow_${index}_aprSeq`)?.value || "",
            aprYn: "N",
            aprStatus: "대기",
            aprReason: row.querySelector(`#approverRow_${index}_aprReason`)?.value || ""
        };
        draftData.draftapproverList.push(approver);
    });

    console.log("전송할 데이터:", JSON.stringify(draftData, null, 2)); 

    axios.post("/approval/draft/submit", draftData)
        .then(resp => {
            alert("결재 상신 완료!");
            location.reload();
        })
        .catch(error => {
            console.error("결재 상신 실패:", error.response ? error.response.data : error);
            alert("결재 등록에 실패했습니다. 서버 로그를 확인하세요.");
        });
}


/** ✅ 6. `상신` 버튼 이벤트 리스너 추가 */
document.addEventListener("DOMContentLoaded", function () {
    document.querySelector("#submitApprovalBtn").addEventListener("click", submitApprovalForm);
});


// 3) 모달 내부 동적 테이블 초기화 함수
// 모달 내부 동적 테이블 초기화: 연차 항목과 결재라인 모두 초기화
  function initDynamicTable() {
    // 연차 항목 테이블 (id: dynamic_table1)
    if (document.getElementById('dynamic_table1') &&
        document.getElementById('plus1') &&
        document.getElementById('minus1')) {
      plusMinusRow({
        tableId: "dynamic_table1",
        plusBtnId: "plus1",
        minusBtnId: "minus1",
        copyRowClass: "copyRow1",
        // 추가 옵션 필요 시 설정 (예: maxRow 등)
        plusRowCallback: function() { console.log("연차 행 추가 완료"); },
        minusRowCallback: function() { console.log("연차 행 삭제 완료"); }
      });
    }
    // 결재라인 테이블 (id: approverTable)
    if (document.getElementById('approverTable') &&
        document.getElementById('plusApprover') &&
        document.getElementById('minusApprover')) {
      plusMinusRow({
        tableId: "approverTable",
        plusBtnId: "plusApprover",
        minusBtnId: "minusApprover",
        copyRowClass: "copyRow2",
        // 추가 옵션 필요 시 설정
        plusRowCallback: function() { console.log("결재라인 행 추가 완료"); },
        minusRowCallback: function() { console.log("결재라인 행 삭제 완료"); }
      });
    }
  }
  // 모달이 열릴 때 동적 테이블 초기화 (결재라인)
  document.addEventListener("DOMContentLoaded", function() {
    $('#approvalFormModal').on('shown.bs.modal', function() {
      initDynamicTable();
    });
  });
