
package kr.or.ddit.board.controller;

import java.io.File;
import java.io.IOException;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.account.vo.AccountVO;
import kr.or.ddit.board.service.BoardService;
import kr.or.ddit.board.vo.BoardVO;

@Controller
@RequestMapping("/board")
public class BoardInsertController {
	
	@Inject
    private BoardService service;
	
    
    @GetMapping("register")
    public String BoardInsertForm(Model model) {
        model.addAttribute("board", new BoardVO());
        return "tiles:board/boardFormUI";
    }
    
    @PostMapping("register/commit")
    public String BoardInsert(HttpSession session,
    		@ModelAttribute BoardVO board, Model model
    ) {
    	AccountVO sessionAccount = (AccountVO) session.getAttribute("sessionAccount");
        
    	if (sessionAccount != null) {
            // accountId를 empId로 설정
            board.setEmpId(sessionAccount.getAccountId());
            System.out.println("----------------------------empId값 확인 : " + board.getEmpId());
        } else {
            // 세션에 sessionAccount가 없는 경우 처리
            model.addAttribute("error", "로그인 정보가 없습니다.");
            return "/account/accountLoginForm";
        }
    	
    	
        // 세션에서 empId 값을 가져와 설정
//        String empId = (String) session.getAttribute("accountId");
//        System.out.println("-----------------------------------------------------------------------------");
//        System.out.println("----------------------------empId값 확인 : " + empId);
//        board.setEmpId(empId);
    	
  
    	
        // 서비스 계층을 통해 데이터베이스에 저장
        service.createBoard(board);
    	return "redirect:/board/list";
    }
}
