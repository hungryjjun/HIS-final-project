package kr.or.ddit.empappointments.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.department.vo.DepartmentVO;
import kr.or.ddit.empappointments.service.AppointmentService;
import kr.or.ddit.empappointments.vo.AppointmentVO;
import kr.or.ddit.empappointments.vo.AppointmentWrapper;
import kr.or.ddit.employee.service.EmployeeService;
import kr.or.ddit.employee.vo.EmployeeVO;
import kr.or.ddit.job.vo.JobVO;
import kr.or.ddit.position.vo.PositionVO;
import kr.or.ddit.rank.vo.RankVO;
import kr.or.ddit.team.vo.TeamVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/employee/appointFormUI")
@RequiredArgsConstructor
public class AppointmentInsertController {
	
	private final AppointmentService service;
	private final EmployeeService empService;
	
	private static final String MODELNAME = "appointment";
	
	// 인사발령 등록 폼 
	@GetMapping
	public String formUI (Model model) {
		
		List<EmployeeVO> empList = empService.readEmpList();
		model.addAttribute("empList", empList);

		List<DepartmentVO> departmentList = service.readDepartment();
		model.addAttribute("departmentList", departmentList);
		
		List<RankVO> rankList = service.readRank();
		model.addAttribute("rankList", rankList);
		
		List<TeamVO> teamList = service.readTeam();
		model.addAttribute("teamList", teamList);
		
		List<PositionVO> positionList = service.readPosition();
		model.addAttribute("positionList", positionList);

		List<JobVO> jobList = service.readJob();
		model.addAttribute("jobList", jobList);
		log.info("=================================={}{}{}{}{}{}" + jobList,empList,departmentList,rankList,teamList,positionList);
		
		return "tiles:employee/appointFormUI";
		
	}
	
	// 인사발령 처리 
	@PostMapping
	public String formProcess(
			@ModelAttribute("appointment") AppointmentWrapper warpper
			,RedirectAttributes redirectAttributes 
		) {
		
		List<AppointmentVO> appointmentList = warpper.getAppointmentList();
		 // appointmentList에 여러 AppointmentVO 객체가 들어있어야함	
		log.info("===============  인  사  발  령  리  스  트 ======================{}",appointmentList);
		
		boolean result1 = service.createAppoint(appointmentList); 
		boolean result2 = service.createAppoint_insertTable(appointmentList);
				
		if(result1 && result2) {
			redirectAttributes.addFlashAttribute("message","발령 등록이 완료되었습니다.");
		} else {
			redirectAttributes.addFlashAttribute("error","발령 등록 실패 담당자에게 문의바랍니다.");
		}
		
		return "redirect:/employee/appointList";
		
	}
	
	
	// 직원 정보 조회 (AJAX 요청 처리) 
	@GetMapping("/getEmployeeInfo")
	@ResponseBody
	public ResponseEntity<EmployeeVO> getEmployeeInfo(@RequestParam("empId") String empId) {
		EmployeeVO employee = empService.readEmp(empId);
		if (employee == null) {
			return ResponseEntity.notFound().build();  // 404 반환
		}
		System.out.println("================"+employee);
		return ResponseEntity.ok(employee);  // JSON 형식으로 반환
	}
	
}
