package kr.or.ddit.spring.config;

import javax.servlet.http.HttpSession;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.web.servlet.handler.HandlerMappingIntrospector;

import kr.or.ddit.account.vo.AccountVO;
import kr.or.ddit.messenger.service.ChatEmpService;
import kr.or.ddit.security.CustomUserDetailService;
import kr.or.ddit.security.RealUserWrapper;
import lombok.extern.slf4j.Slf4j;

/**
 * 
 * @author youngjun
 * @since 2025. 3. 17.
 * @see
 *
 *      <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 11.     	youngjun	          최초 생성
 *  2025. 3. 17.     	youngjun	          security 재설정
 *
 *      </pre>
 */
@Configuration
@EnableWebSecurity
@Slf4j
public class SecurityConfig {

	private final ChatEmpService chatEmpService;
	private final SimpMessagingTemplate messagingTemplate;
	private final CustomUserDetailService userDetailsService;

	@Bean
	public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
		return http.getSharedObject(AuthenticationManagerBuilder.class).userDetailsService(userDetailsService)
				.passwordEncoder(passwordEncoder()).and().build();
	}

	public SecurityConfig(ChatEmpService chatEmpService, SimpMessagingTemplate messagingTemplate,
			CustomUserDetailService userDetailsService) {
		this.chatEmpService = chatEmpService;
		this.messagingTemplate = messagingTemplate;
		this.userDetailsService = userDetailsService;
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return PasswordEncoderFactories.createDelegatingPasswordEncoder();
	}

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http.csrf(csrf -> csrf.disable()).authorizeHttpRequests(auth -> auth
//            .requestMatchers("/account/login/main").permitAll()  //로그인은 누구나 접근 가능
				.requestMatchers(
						"/login",
						"/resources/**",
						"/").permitAll() // 비로그인자만 접근가능
//				.requestMatchers(new AntPathRequestMatcher("/account/read/**")).hasRole("인사관리자")
//				.requestMatchers(new AntPathRequestMatcher("/account/read/**")).hasRole("인사팀장").anyRequest()
//				.authenticated() // 나머지는 인증 필요
		).formLogin(login -> login.loginPage("/") // 로그인 폼 URL
				.loginProcessingUrl("/login/loginProcess") // 로그인 처리 URL
				.usernameParameter("accountId").passwordParameter("password")
				.defaultSuccessUrl("/account/login/home", true) // 로그인 성공 시 이동할 페이지
				.successHandler((request, response, authentication) -> {// 기존 세션유지 추가
					HttpSession session = request.getSession();
					RealUserWrapper realUser = (RealUserWrapper) authentication.getPrincipal();
					AccountVO account = realUser.getRealUser();
					session.setAttribute("sessionAccount", account);

					response.sendRedirect("/account/login/home"); // 로그인 성공후 리다이렉트할 페이지
				}) // 기존 세션 유지
				.failureUrl("/?error=true") // 로그인 실패 시 에러 파라미터 추가
				.permitAll()).logout(logout -> logout.logoutUrl("/account/login/logout") // 로그아웃 URL
						.logoutSuccessUrl("/") // 로그아웃 후 이동할 URL
						.invalidateHttpSession(true) // 세션 무효화
						.deleteCookies("JSESSIONID") // JSESSIONID 쿠키 삭제
						.permitAll() // 로그아웃 URL 접근 가능하도록 설정
		).sessionManagement(session -> session
//                    .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)  // 필요할 때만 세션 생성
				.maximumSessions(1) // 한 명의 사용자만 로그인 가능
				.expiredUrl("/account/login?expired") // 세션 만료 시 이동할 페이지
		);
		return http.build();
	}

	@Bean
	public HandlerMappingIntrospector mvcHandlerMappingIntrospector() {
		return new HandlerMappingIntrospector();
	}
}