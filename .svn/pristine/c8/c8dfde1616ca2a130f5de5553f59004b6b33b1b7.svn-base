package kr.or.ddit.evaluation.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.empappointments.service.AppointmentService;
import kr.or.ddit.employee.service.EmployeeService;
import kr.or.ddit.evaluation.exception.DuplicateEvaluationCandidateException;
import kr.or.ddit.evaluation.service.EvaluationCandidateService;
import kr.or.ddit.evaluation.vo.EvaluationCandidateVO;
import kr.or.ddit.evaluation.vo.EvaluationCandidateWrapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/evaluation")
@RequiredArgsConstructor
public class EvaluationCandidateListController {

	private final EvaluationCandidateService service;
	
	@GetMapping("/evaluationCandidateList")
	public String readList(
			@RequestParam(required = false) String rank,
            @RequestParam(required = false) String year,
            @RequestParam(required = false) String half,
			Model model) {

		List<EvaluationCandidateVO> candidateList = service.selectAll(rank, year, half); 
		if (candidateList == null) {
			candidateList = new ArrayList<>();
		}
 
		EvaluationCandidateWrapper wrapper = new EvaluationCandidateWrapper();
        wrapper.setCandidateList(candidateList);

        model.addAttribute("wrapper", wrapper);
        model.addAttribute("rank", rank);
        model.addAttribute("year", year);
        model.addAttribute("half", half);
        
		return "tiles:evaluation/evaluationCandidateList";
		
	}
	
	// 실제 등록 처리
	@PostMapping("/evaluationCandidateUpdate")
	public String updateCandidates(
			@ModelAttribute("wrapper") EvaluationCandidateWrapper wrapper
			,RedirectAttributes redirectAttributes) {
	    try {
	        if (wrapper.getCandidateList() == null || wrapper.getCandidateList().isEmpty()) {
	            redirectAttributes.addFlashAttribute("error", "선택된 대상자가 없습니다.");
	            return "redirect:/evaluation/evaluationCandidateList";
	        }

	        service.updateAll(wrapper.getCandidateList());
	        redirectAttributes.addFlashAttribute("success", "등록이 완료되었습니다.");
	    } catch (DuplicateEvaluationCandidateException e) {
	        redirectAttributes.addFlashAttribute("error", "중복된 대상자가 존재합니다.");
	    }
	    return "redirect:/evaluation/evaluationCandidateList";
	}
}






