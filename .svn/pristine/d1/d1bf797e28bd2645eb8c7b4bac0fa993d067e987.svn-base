package kr.or.ddit.account.controller;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.account.service.AccountService;
import kr.or.ddit.account.vo.AccountVO;
import kr.or.ddit.messenger.service.ChatEmpService;
import lombok.extern.slf4j.Slf4j;

/**
 * 
 * @author youngjun
 * @since 2025. 3. 12.
 * @see
 *
 *      <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 12.     	youngjun	          최초 생성
 *  2025. 3. 14.     	태우	          		  로그인 후 컨텐츠 안에서 동적인 현재 시간 받아오기 위함
 *
 *      </pre>
 */
@Slf4j
@Controller
@RequestMapping("/account/login")
public class AccountLoginController {

	@Autowired
	private AccountService service;
	@Autowired
	private ChatEmpService cservice;

	@GetMapping
	public String accountLoginForm(HttpSession sessionAccount) {

		AccountVO authAccount = (AccountVO) sessionAccount.getAttribute("authAccount");
		log.info("sessionAccount{}", sessionAccount);

		if (sessionAccount != null) {
			log.info("sessionAccount 세션로그인 완료{}", sessionAccount);
			return "tiles:mazer/content";
		}
		return "account/accountLoginForm";
	}

	@PostMapping("/main")
	public String accountLogin(@RequestParam("accountId") String accountId, @RequestParam("password") String password,
			Model model, HttpSession accountSession) {
		AccountVO account = new AccountVO();
		account.setAccountId(accountId);
		account.setPassword(password);
		log.info("accountId--:{}",accountId);
		log.info("password--:{}",password);

		try {
			AccountVO sessionAccount = service.authenticate(account);
			accountSession.setAttribute("sessionAccount", sessionAccount);
			updateMessengerStatus(sessionAccount.getEmpId(), "온라인");
			//오늘 날짜(yyyy-MM-dd) content로 넘겨주는 코드
			LocalDateTime now = LocalDateTime.now();
		    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		    String formattedTime = now.format(formatter);
			model.addAttribute("now",formattedTime);
			
			return "tiles:mazer/content";
		} catch (Exception e) {
			model.addAttribute("error", "계정정보가 맞지 않습니다.");
			return "account/accountLoginForm";
		}
	}

	@GetMapping("/logout")
	public String accountLogout(HttpSession sessionAccount) {
		AccountVO authAccount = (AccountVO) sessionAccount.getAttribute("authAccount");
		log.info("sessionAccount로그아웃 페이지임~~~~~~~~~~{}", sessionAccount);
	    	   
		return "account/accountLoginForm";
	}

	
	private void updateMessengerStatus(String empId, String status) {
	    if(empId != null) {
	        log.info("상태 업데이트 실행 - empId: {}, status: {}", empId, status);
	        boolean isUpdated = cservice.updateEmpStatus(empId, status);
	        log.info(" 상태 업데이트 결과: {}", isUpdated ? "성공" : "실패");
	    } else {
	        log.warn(" 상태 업데이트 실패 - empId가 null입니다.");
	    }
	}
}
