<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 * == 개정이력(Modification Information) ==
 *   
 *   수정일               수정자           수정내용
 *  ============      ============== =======================
 *  2025. 3. 19.        youngjun            최초 생성
 *  2025. 3. 20.        youngjun            공제, 수당조회
 *  2025. 3. 21.        youngjun            전직원 급여등록
 *  2025. 3. 23.     	youngjun	     수당 공제 등록시 급여에 총액반영 후 실지급액 총지급액 업데이트
 *  2025. 3. 23.     	youngjun	     년/월별 총 사원수, 지급, 공제, 수당, 실지급액 조회
 *  2025. 3. 26.     	youngjun	     연/월별 데이터조회, 그래프반영
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.mybatis.mappers.salary.SalaryMapper">

<resultMap type="SalaryVO" id="salaryMap" autoMapping="true">
		<id property="salaryId" column="salary_id"/>
		<collection property="deductionList" ofType="DeductionVO" >
			   		 <id property="deductionId" column="deduction_id"/>
			    <result property="deductionCode" column="deduction_code"/>  
			    <result property="deductionAmount" column="DEDUCTION_AMOUNT"/>
			    
			    <association property="deductionCodeVO" javaType="DeductionCodeVO" autoMapping="true">
			   		 <id property="deductionCode" column="deduction_code"/>
			    </association>
			    
		</collection>
		
		<collection property="allowanceList" ofType="AllowanceVO" autoMapping="true">
		    <id property="allowanceId" column="allowance_id"/>
		    <result property="allowanceCode" column="allowance_code"/>  
		    <result property="allowanceAmount" column="allowance_amount"/>
		    
		    <association property="allowanceCodeVO" javaType="AllowanceCodeVO" autoMapping="true">
		        <id property="allowanceCode" column="allowance_code"/>
		    </association>
		</collection>
		
		
			<collection property="employeeList" resultMap="employeeMap"></collection>
</resultMap>

<resultMap type="EmployeeVO" id="employeeMap" autoMapping="true">
	<id property="empId" column="emp_id"/>
	<result property="name" column="name"/>
	<association property="team" javaType="TeamVO" autoMapping="true"/>
	<association property="department" javaType="DepartmentVO" autoMapping="true"/>
	<association property="rank" javaType="RankVO" autoMapping="true"/>
</resultMap>

<select id="salaryList" resultMap="salaryMap">
 SELECT
  S.SALARY_ID,
  S.EMP_ID,
  S.PAY_YEAR,
  S.PAY_MONTH,
  S.BASE_SALARY,
  S.TOTAL_ALLOWANCE,
  S.TOTAL_PAY,
  S.TOTAL_DEDUCTION,
  S.NET_SALARY,
  S.PAY_STATUS,
  S.PAY_STDAY,
  S.PAY_ENDDAY,
  S.PAY_YEAR || '년 ' || S.PAY_MONTH || '월' AS PAY_MONTH,
  S.CONFIRM_DATE,
  E.EMP_ID,
  E.NAME,
  D.DEPARTMENT_NAME,
  D.DEPARTMENT_ID,
  T.TEAM_NAME,
  R.RANK_ID,
  R.RANK_NAME,
  S.PAYMENT_REQUEST,
  S.TRANSFER_REQUEST_DATE,
  S.PAID,
  S.PAY_DATE
FROM SALARY_MANAGEMENT S
LEFT JOIN EMPLOYEE E ON S.EMP_ID = E.EMP_ID
LEFT JOIN DEPARTMENT D ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
LEFT JOIN RANK R ON R.RANK_ID = E.RANK_ID
LEFT JOIN TEAM T ON T.TEAM_ID = E.TEAM_ID
</select>

<select id="salarySelected" resultMap="salaryMap">
SELECT
  S.SALARY_ID,
  S.EMP_ID,
  S.PAY_YEAR,
  S.PAY_MONTH,
  S.BASE_SALARY,
  S.TOTAL_ALLOWANCE ,
  A.ALLOWANCE_AMOUNT , 
  A.ALLOWANCE_CODE ,
  A.ALLOWANCE_ID,
  AC.ALLOWANCE_NAME,
  S.TOTAL_DEDUCTION ,
  DE.DEDUCTION_ID,
  DE.DEDUCTION_AMOUNT ,  
  DC.DEDUCTION_CODE ,
  DC.DEDUCTION_NAME,
  S.TOTAL_PAY,
  S.NET_SALARY,
  S.PAY_DATE,
  S.PAY_STATUS,
  S.PAY_STDAY,
  S.PAY_ENDDAY,
  S.PAY_YEAR || '년 ' || S.PAY_MONTH || '월' AS PAY_MONTH,
  E.EMP_ID,
  E.NAME,
  D.DEPARTMENT_NAME,
  D.DEPARTMENT_ID,
  T.TEAM_NAME,
  R.RANK_ID,
  R.RANK_NAME
FROM SALARY_MANAGEMENT S
LEFT JOIN EMPLOYEE E ON S.EMP_ID = E.EMP_ID
LEFT JOIN DEPARTMENT D ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
LEFT JOIN RANK R ON R.RANK_ID = E.RANK_ID
LEFT JOIN TEAM T ON E.TEAM_ID=T.TEAM_ID
LEFT JOIN DEDUCTION DE ON S.SALARY_ID = DE.SALARY_ID  
LEFT JOIN DEDUCTION_CODE DC ON DE.DEDUCTION_CODE = DC.DEDUCTION_CODE
LEFT JOIN ALLOWANCE A ON S.SALARY_ID = A.SALARY_ID 
LEFT JOIN ALLOWANCE_CODE AC ON AC.ALLOWANCE_CODE = A.ALLOWANCE_CODE
WHERE E.EMP_ID = #{empId} AND PAY_YEAR= #{payYear} AND PAY_MONTH= #{payMonth}
</select>

<!-- 수당항목조회 -->
<select id="AllowanceList">
SELECT
    ALLOWANCE_CODE
  , ALLOWANCE_NAME
  , ALLOWANCE_DESC
FROM
    ALLOWANCE_CODE
</select>

<!-- 공제항목 조회 -->
<select id="DeductionList">
SELECT
   DEDUCTION_CODE
  , DEDUCTION_NAME
  , DEDUCTION_DESC
  , DEDUCTION_RATE
  , DEDUCTION_CALC_BASE 
  , DEDUCTION_CALC_LOGIC
FROM
    DEDUCTION_CODE
</select>

<!-- 전직원 급여등록 -->
<insert id="InsertSalary">
	INSERT INTO salary_management (
    SALARY_ID
    , EMP_ID
    , PAY_YEAR
    , PAY_MONTH
    , BASE_SALARY
    , TOTAL_ALLOWANCE
    , TOTAL_PAY
    , TOTAL_DEDUCTION
    , NET_SALARY
    , CREATE_AT
    , PAY_STATUS
    , PAY_STDAY
    , PAY_ENDDAY
) 
    SELECT
    EMP_ID || #{payYear} || LPAD(#{payMonth}, 2, '0')
    ,EMP_ID
    ,#{payYear}
    ,#{payMonth}
    ,SALARY
    ,0
    ,SALARY+0
    ,0
    ,SALARY+0
    ,SYSDATE
    ,'확정대기'
    ,TO_DATE(#{payYear} || '-' || LPAD(#{payMonth}, 2, '0') || '-01', 'YYYY-MM-DD')
    ,LAST_DAY(TO_DATE(#{payYear} || '-' || LPAD(#{payMonth}, 2, '0') || '-01', 'YYYY-MM-DD'))
  FROM EMPLOYEE
</insert>

<!-- 수당등록 급여테이블 참조 -->
<insert id="InsertDeducation">
  BEGIN
    PROC_INSERT_DEDUCTION(#{payYear}, #{payMonth});
  END;
</insert>

<!-- 공제등록 - 인사기록카드 참조 -->
<insert id="InsertAllowance">
BEGIN
  PROC_INSERT_ALLOWANCE(#{payYear}, #{payMonth});
END;
</insert>

<select id="salaryInfo" resultMap="salaryMap">
SELECT 
    (SELECT COUNT(*) FROM EMPLOYEE) AS totalemp,
    (SELECT COUNT(*) FROM SALARY_MANAGEMENT WHERE PAY_STATUS = '확정') AS confirmedCount,
    (SELECT SUM(NET_SALARY) FROM SALARY_MANAGEMENT) AS totalNetSalary,
    (SELECT COUNT(*) FROM SALARY_MANAGEMENT ) AS totalSalaryCount,
    (
        SELECT COUNT(*) FROM EMPLOYEE 
        WHERE EMP_ID NOT IN (
            SELECT EMP_ID FROM SALARY_MANAGEMENT 
            
        )
    ) AS notSalaryInsert,
    (SELECT COUNT(*) FROM ACCOUNT) AS totalAccount,
    (
        SELECT COUNT(*) FROM EMPLOYEE 
        WHERE EMP_ID NOT IN (SELECT EMP_ID FROM ACCOUNT)
    ) AS unRegisterAccount
FROM DUAL
</select>

<update id="deducationTotalUpdate">
UPDATE SALARY_MANAGEMENT SM
SET TOTAL_DEDUCTION = (
    SELECT NVL(SUM(DEDUCTION_AMOUNT), 0)
    FROM DEDUCTION D
    WHERE D.SALARY_ID = SM.SALARY_ID
)
WHERE PAY_YEAR = #{payYear} AND PAY_MONTH = #{payMonth}
</update>

<update id="allowanceTotalUpdate">
UPDATE SALARY_MANAGEMENT SM
SET TOTAL_ALLOWANCE = (
    SELECT NVL(SUM(ALLOWANCE_AMOUNT), 0)
    FROM ALLOWANCE A
    WHERE A.SALARY_ID = SM.SALARY_ID
)
WHERE PAY_YEAR = #{payYear} AND PAY_MONTH = #{payMonth}
</update>

<update id="salaryTotalAmountUpdate">
UPDATE SALARY_MANAGEMENT
SET TOTAL_PAY = BASE_SALARY + TOTAL_ALLOWANCE,
    NET_SALARY = (BASE_SALARY + TOTAL_ALLOWANCE) - TOTAL_DEDUCTION
WHERE PAY_YEAR = #{payYear} AND PAY_MONTH = #{payMonth}
</update>

<!-- 년,월별 전 임직원수, 총지급, 수당, 공제, 실지급액 조회 -->
<select id="SalarySummaryByMonth" resultMap="salaryMap">
SELECT
    SM.PAY_YEAR,
    SM.PAY_MONTH,
    COUNT(E.EMP_ID) AS totalemp,
    SUM(SM.TOTAL_PAY) AS totalPaySum,
    SUM(SM.TOTAL_ALLOWANCE) AS totalAllowanceSum,
    SUM(SM.TOTAL_DEDUCTION) AS totalDeductionSum,
    SUM(SM.NET_SALARY) AS totalNetSalary
FROM SALARY_MANAGEMENT SM
JOIN EMPLOYEE E ON E.EMP_ID = SM.EMP_ID
GROUP BY SM.PAY_YEAR, SM.PAY_MONTH
ORDER BY SM.PAY_YEAR DESC, SM.PAY_MONTH DESC
</select>

<select id="salarySelectedSummaryMonth" resultMap="salaryMap">
    SELECT  
	 COUNT(E.EMP_ID)AS totalemp,
     COUNT(SM.EMP_ID)AS totalSalaryCount,
     COUNT(E.EMP_ID)-COUNT(SM.EMP_ID) AS notSalaryInsert,
	 SUM(SM.TOTAL_PAY)AS totalPaySum,
	 SUM(SM.TOTAL_ALLOWANCE)AS totalAllowanceSum,
	 SUM(SM.TOTAL_DEDUCTION)AS totalDeductionSum,
	 SUM(SM.NET_SALARY)AS totalNetSalary,
	 COUNT(CASE WHEN SM.PAY_STATUS = '확정' THEN 1 END)AS confirmedCount 
	 FROM SALARY_MANAGEMENT SM 
	 JOIN EMPLOYEE E ON E.EMP_ID = SM.EMP_ID 
	 WHERE SM.PAY_YEAR = #{payYear}
    AND SM.PAY_MONTH = #{payMonth}
</select>

<!-- 급여등록전 미리보기 -->
<select id="salaryInsertEx" resultMap="salaryMap">
	SELECT
    SM.PAY_YEAR,
    SM.PAY_MONTH,
    COUNT(E.EMP_ID) AS totalemp,
    SUM(SM.TOTAL_PAY) AS totalPaySum,
    SUM(SM.TOTAL_ALLOWANCE) AS totalAllowanceSum,
    SUM(SM.TOTAL_DEDUCTION) AS totalDeductionSum,
    SUM(SM.NET_SALARY) AS totalNetSalary
FROM SALARY_MANAGEMENT SM
JOIN EMPLOYEE E ON E.EMP_ID = SM.EMP_ID
WHERE SM.PAY_YEAR = #{payYear} AND SM.PAY_MONTH = #{payMonth}
GROUP BY SM.PAY_YEAR, SM.PAY_MONTH
</select>

<!-- 부서 평균급여 -->
<select id="departMentAvgSalry" resultMap="salaryMap">
  SELECT D.DEPARTMENT_NAME AS name,
         D.DEPARTMENT_ID,
 FLOOR(AVG(SM.NET_SALARY))AS avgSalary 
 FROM SALARY_MANAGEMENT SM 
	 JOIN EMPLOYEE E ON E.EMP_ID = SM.EMP_ID 
	 JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 WHERE SM.PAY_YEAR = #{payYear}
 AND SM.PAY_MONTH = #{payMonth}
 GROUP BY D.DEPARTMENT_NAME , D.DEPARTMENT_ID
<!-- SELECT  -->
<!--     D.DEPARTMENT_NAME, -->
<!--     D.DEPARTMENT_ID, -->
<!--     ROUND(AVG(S.NET_SALARY)) AS AVG_SALARY -->
<!-- FROM  -->
<!--     SALARY_MANAGEMENT S -->
<!-- JOIN  -->
<!--     EMPLOYEE E ON S.EMP_ID = E.EMP_ID -->
<!-- JOIN  -->
<!--     DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID -->
<!-- WHERE  -->
<!--     D.DEPARTMENT_ID IN ('300','301','302','303') -->
<!-- GROUP BY  -->
<!--     D.DEPARTMENT_NAME, D.DEPARTMENT_ID -->
<!-- ORDER BY  -->
<!--     D.DEPARTMENT_ID -->
</select>

<!-- 직급별 평균급여 -->
<select id="rankAvgSalary" resultMap="salaryMap">
SELECT R.RANK_NAME AS name
, FLOOR(AVG(SM.NET_SALARY)) AS avgSalary 
FROM SALARY_MANAGEMENT SM 
JOIN EMPLOYEE E ON E.EMP_ID = SM.EMP_ID JOIN RANK R ON E.RANK_ID = R.RANK_ID 
WHERE SM.PAY_YEAR = #{payYear} AND SM.PAY_MONTH = #{payMonth} 
GROUP BY R.RANK_NAME
</select>

<select id="getPayStatus" resultType="map">
  SELECT 
  	PAY_STATUS,
    TO_CHAR(CONFIRM_DATE, 'YYYY-MM-DD') AS confirmDate,
    PAYMENT_REQUEST,
    TO_CHAR(TRANSFER_REQUEST_DATE, 'YYYY-MM-DD') AS transferRequestDate
  FROM 
  	SALARY_MANAGEMENT
  WHERE 
  	SALARY_ID = #{salaryId}
   	 AND EMP_ID = #{empId}
</select>

<!-- 확정값 토글(확정,확정대기) -->
<update id="togglePayStatus">
UPDATE SALARY_MANAGEMENT
SET 
  PAY_STATUS = 
    CASE 
      WHEN PAY_STATUS = '확정대기' THEN '확정'
      ELSE '확정대기'
    END,
  CONFIRM_DATE = 
    CASE 
      WHEN PAY_STATUS = '확정대기' THEN SYSDATE
      ELSE NULL
    END
WHERE SALARY_ID = #{salaryId}
  AND EMP_ID = #{empId}
  AND (
    PAY_STATUS = '확정'
    OR
    (PAY_STATUS = '확정대기' AND PAYMENT_REQUEST = '요청대기')
  )
</update>

<!-- 이체요청 토글 (요청대기,요청완료) -->
<update id="togglePayRequest">
	UPDATE
    SALARY_MANAGEMENT
SET
    PAYMENT_REQUEST =
    CASE
    WHEN PAYMENT_REQUEST ='요청대기' THEN '요청완료'
    ELSE '요청대기'
  END,
  TRANSFER_REQUEST_DATE =
  CASE
  WHEN PAYMENT_REQUEST ='요청대기' THEN SYSDATE
  ELSE NULL
  END
  WHERE SALARY_ID=#{salaryId} AND EMP_ID=#{empId}
  AND PAY_STATUS='확정'
</update>

<select id="getSalaryList" parameterType="map" resultMap="salaryMap">
		 SELECT
	 S.SALARY_ID,
	 S.EMP_ID,
	 S.PAY_YEAR,
	 S.PAY_MONTH,
	 S.BASE_SALARY,
	 S.TOTAL_ALLOWANCE,
	 S.TOTAL_PAY,
	 S.TOTAL_DEDUCTION,
	 S.NET_SALARY,
	 S.PAY_DATE,
	 S.PAY_STATUS,
	 S.PAY_STDAY,
	 S.PAY_ENDDAY,
	 S.PAY_YEAR || '년 ' || S.PAY_MONTH || '월' AS PAY_MONTH,
	 S.CONFIRM_DATE,
	 E.EMP_ID,
	 E.NAME,
	 D.DEPARTMENT_NAME,
	 D.DEPARTMENT_ID,
	 T.TEAM_NAME,
	 R.RANK_ID,
	 R.RANK_NAME,
	 S.PAYMENT_REQUEST,
	 S.TRANSFER_REQUEST_DATE,
	 S.PAID
	 FROM SALARY_MANAGEMENT S 
	 LEFT JOIN EMPLOYEE E ON S.EMP_ID = E.EMP_ID 
	 LEFT JOIN DEPARTMENT D ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
	 LEFT JOIN RANK R ON R.RANK_ID = E.RANK_ID 
	 LEFT JOIN TEAM T ON T.TEAM_ID = E.TEAM_ID 
 WHERE S.PAY_YEAR = #{payYear}
 AND S.PAY_MONTH = #{payMonth}
</select>

<select id="finalSalaryList" resultMap="salaryMap">
	SELECT 
    S.SALARY_ID 
    ,E.NAME
    ,S.EMP_ID
    ,D.DEPARTMENT_NAME
    ,T.TEAM_NAME
    ,R.RANK_NAME
    ,S.PAY_YEAR
    ,S.PAY_MONTH
    ,S.BASE_SALARY
    ,S.TOTAL_ALLOWANCE
    ,S.TOTAL_DEDUCTION
    ,S.TOTAL_PAY
    ,S.NET_SALARY
    ,S.CONFIRM_DATE
    ,S.PAY_STATUS
    ,S.PAYMENT_REQUEST
    FROM EMPLOYEE E
    LEFT JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID
    LEFT JOIN RANK R ON E.RANK_ID=R.RANK_ID
    LEFT JOIN TEAM T ON T.TEAM_ID=E.TEAM_ID
    LEFT JOIN SALARY_MANAGEMENT S ON S.EMP_ID=E.EMP_ID 
   WHERE S.PAY_STATUS='확정' AND E.EMP_ID=E.EMP_ID
</select>    


</mapper>