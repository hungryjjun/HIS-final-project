package kr.or.ddit.QR.controller;


import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import kr.or.ddit.account.vo.AccountVO;
import kr.or.ddit.attendance.service.AttendanceService;
import kr.or.ddit.attendance.vo.AttendanceVO;
import lombok.extern.slf4j.Slf4j;
/**
 * 
 * 
 * @author 정태우
 * @since 2025. 3. 14.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 12.     	정태우	          최초 생성
 *
 * </pre>
 */
@Controller
@Slf4j
@RequestMapping("/")
public class QRCodeController {
	
	@Autowired
	AttendanceService service;
	
	@PostMapping(value = "scan-qr", produces = "application/json")
	@ResponseBody
	public Map<String, Object> scanQR(@RequestBody Map<String, Object> payload,HttpServletRequest request) {
	    String userId = (String) payload.get("who");
	    double userLat = (double) payload.get("latitude");
	    double userLng = (double) payload.get("longitude");
	    
	    String StrUserLat = String.valueOf(userLat);
	    String StrUserLng = String.valueOf(userLng);
	   
	     // 융문동 파스쿠찌 위도 36.3355212;
	     // 융문동 파스쿠찌 위도 127.3891233;
	     // 대덕 위도 36.3250181;
	     // 대덕 경도 127.408912;
	    double companyLat = 36.3355212;
	    double companyLng = 127.3891233; 

	    Map<String, Object> response = new HashMap<>();
	    
	    // ✅ 사용자의 오늘 출근 기록 조회
	    AttendanceVO existingAttendance = service.findTodayAttendance(userId);

	    // ✅ 사용자가 회사 위치에서 QR 스캔했는지 확인
	    if (Math.abs(userLat - companyLat) < 0.01 && Math.abs(userLng - companyLng) < 0.01) {
	        LocalDateTime now = LocalDateTime.now();
	        DateTimeFormatter formatterDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
	        DateTimeFormatter formatterTime = DateTimeFormatter.ofPattern("HH:mm:ss");
	        String formattedDate = now.format(formatterDate);
	        String formattedTime = now.format(formatterTime);
	        System.out.println("existingAttendance:"+existingAttendance);
	        if (existingAttendance != null) {
	            // ✅ 이미 출근 기록이 있으면 -> 퇴근 처리
	            existingAttendance.setWorkEndTime(formattedTime);
	            service.updateWorkEnd(existingAttendance);
	            response.put("success", true);
	            response.put("message", "퇴근 처리가 완료되었습니다.");
	            response.put("checkOutTime", formattedTime);
	            HttpSession session = request.getSession();
	            session.setAttribute("checkOut", formattedTime);
	            System.out.println("퇴근 시간 세션 저장됨: " + session.getAttribute("checkOut"));
	        } else {
	            // ✅ 출근 기록이 없으면 -> 출근 처리
	            AttendanceVO attendance = new AttendanceVO();
	            attendance.setEmpId(userId);
	            attendance.setWorkDate(formattedDate);
	            attendance.setWorkStartTime(formattedTime);
	            attendance.setWorkEndTime(null);
	            attendance.setWorkingHours(null);
	            attendance.setLatitude(StrUserLat);
	            attendance.setLongtitude(StrUserLng);

	            // ✅ 출근 상태 설정
	            if (now.toLocalTime().isBefore(LocalTime.of(9, 0))) {
	                attendance.setAttendanceStatus("정상");
	            } else if (now.toLocalTime().isBefore(LocalTime.of(18, 0))) {
	                attendance.setAttendanceStatus("지각");
	            } else {
	                attendance.setAttendanceStatus("무단결근");
	            }

	            attendance.setStatusId("A001");
	            attendance.setEmployee(null);
	            service.attendanceInsert(attendance);
	            System.out.println("attendance:"+attendance);
	            response.put("success", true);
	            response.put("message", "출근 처리가 완료되었습니다.");
	            response.put("checkInTime", formattedTime);
	            HttpSession session = request.getSession();
	            session.setAttribute("checkIn", formattedTime);  // 출근 시간 저장
	            System.out.println("출근 시간 세션 저장됨: " + session.getAttribute("checkIn"));

	        }
	    } else {
	        response.put("success", false);
	        response.put("message", "출근/퇴근 가능한 위치가 아닙니다.");
	    }
	    return response;
	}
	
	@GetMapping("qrqr")
	public String locationQR(
		@RequestParam("who") String memId
		,Model model
	) {
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss"); // 원하는 형식 지정
        String formattedTime = now.format(formatter);
        model.addAttribute("checkInTime", formattedTime);
		model.addAttribute("who",memId);
		return "qr/QRcheck";
	}
	
	//ip와 id(name)을 담은 정보를 QR로 전송
    @GetMapping("generate-qr")
    public String generateQRCode(Model model
    	,HttpSession session
    	,HttpServletRequest req
    	) throws UnknownHostException, SocketException {
    	AccountVO account = (AccountVO) session.getAttribute("sessionAccount");
    	log.info("큐알에 준 값 : {}",account.getAccountId());
    	String Ip = Getip();
        String qrData = "https://"+Ip+req.getContextPath()+"/qrqr?who="+account.getAccountId();
        try {
            // QR 코드 생성
            int size = 100;
            QRCodeWriter qrCodeWriter = new QRCodeWriter();
            Hashtable<EncodeHintType, Object> hints = new Hashtable<>();
            hints.put(EncodeHintType.MARGIN, 1); // 여백 설정

            BitMatrix bitMatrix = qrCodeWriter.encode(qrData, BarcodeFormat.QR_CODE, size, size, hints);

            // BitMatrix를 BufferedImage로 변환
            BufferedImage bufferedImage = new BufferedImage(size, size, BufferedImage.TYPE_INT_RGB);
            for (int x = 0; x < size; x++) {
                for (int y = 0; y < size; y++) {
                    bufferedImage.setRGB(x, y, (bitMatrix.get(x, y)) ? 0x000000 : 0xFFFFFF); // 검정과 흰색으로 설정
                }
            }

            // 이미지를 ByteArray로 변환하여 JSP로 전달
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            ImageIO.write(bufferedImage, "PNG", byteArrayOutputStream);
            byte[] qrImageBytes = byteArrayOutputStream.toByteArray();
            String qrCodeImage = "data:image/png;base64," + java.util.Base64.getEncoder().encodeToString(qrImageBytes);

            model.addAttribute("qrCode", qrCodeImage); // 모델에 QR 코드 이미지 추가

        } catch (Exception e) {
            e.printStackTrace();
        }
        return "qr/QRcode"; // QR 코드 페이지로 이동
    }
    
    //IP 추출 해주는 메소드
    public String Getip() throws SocketException {
        String wifiIp = null;

        for (NetworkInterface netIf : Collections.list(NetworkInterface.getNetworkInterfaces())) {
            String name = netIf.getDisplayName().toLowerCase();
            if (name.contains("wi-fi") || name.contains("wlan") || name.contains("en0")) {
                for (InetAddress addr : Collections.list(netIf.getInetAddresses())) {
                    if (addr instanceof Inet4Address && !addr.isLoopbackAddress()) {
                        wifiIp = addr.getHostAddress(); // IP 주소 설정
                        break; // 찾은 IP 주소가 있으면 더 이상 순회하지 않음
                    }
                }
            }
        }
        return wifiIp; // IP 반환
    }
}
