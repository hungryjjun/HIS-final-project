<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
<style>
thead th {
    text-align: center !important;
}
.modal-title {
	color: white !important;
    flex-grow: 1; /* 제목이 가운데 정렬될 수 있도록 설정 */
    text-align: center;
}
.modal-header .btn-close {
    filter: invert(1); /* 아이콘 색 반전 (검정 → 흰색) */
    opacity: 1; /* 기본 부트스트랩 스타일보다 더 뚜렷하게 표시 */
}
.modal-body strong {
    display: inline-block;
    width: 120px; /* 라벨 너비 통일 */
    font-weight: bold;
    color: #333;
}
.applicant-button {
    pointer-events: auto !important;
}
.modal.fade .modal-dialog {
    transition: transform 0.3s ease-out;
    transform: translateY(-10px);
}

.modal.show .modal-dialog {
    transform: translateY(0);
}
</style>

<!-- chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="page-heading">
	<div class="page-title">
		<div class="row">
			<div class="col-12 col-md-6 order-md-1 order-last">
				<h4>채용공고 목록</h4>
				<p class="text-subtitle text-muted">DB연결 테스트용</p>
			</div>
		</div>
	</div>
	<section class="section">
		<div class="card">
			<div class="card-header">Simple Datatable.DB연동 O. table id="table1"</div>
ORDER BY RECRUIT_ID DESC<br>
			<div class="card-body">
				<!-- chart -->			
				<canvas id="applicantChart" width="400" height="200"></canvas>
				<!-- 필터버튼 추가 -->
				<div class="mb-3">
					<button class="btn btn-outline-primary filter-button" data-status="open">
						모집 중
					</button>
					<button class="btn btn-outline-primary filter-button" data-status="close">
						모집마감
					</button>
				</div>
				<table class="table table-striped text-center" id="table1">
					<thead>
						<tr>
							<th>제목</th>
							<th>기존상세페이지</th>
							<th>고용형태</th>
							<th>모집기간</th>
							<th>지원현황</th>
						</tr>
					</thead>
					<tbody>
						<c:choose>
							<c:when test="${not empty recruitBoardList }">
								<c:forEach items="${recruitBoardList }" var="recruitBoard">
									<tr class="recruit-row" data-enddate="<fmt:formatDate value='${recruitBoard.recruitEnddate}' pattern='yyyy-MM-dd' />">
										<td>
											rId:${recruitBoard.recruitId}
											<!-- 상세조회 모달창 띄우는 제목 -->
											<a class="recruit-detail-link" data-recruit-id="${recruitBoard.recruitId}" style="cursor: pointer;">
												${recruitBoard.recruitTitle}
											</a>
										</td>	
										<td>
										<a href="${pageContext.request.contextPath }/recruit/board/detail?recruitId=${recruitBoard.recruitId}">
									        이동
									    </a>
										</td>
										<td>${recruitBoard.recruitHiretype }</td>
										<td>
											<!-- 포맷팅 사용하기 위해 JSTL 태그 라이브러리를 선언, documentVO 에서 타입을 String -> Date 로 변환 -->
											<fmt:formatDate value="${recruitBoard.recruitStartdate }" pattern="yyyy-MM-dd" />
											 ~ <fmt:formatDate value="${recruitBoard.recruitEnddate }" pattern="yyyy-MM-dd" />
										</td>
										<td>
											<span class="applicant-count" hidden>${recruitBoard.applicantCount}</span>
											<a href="${pageContext.request.contextPath }/recruit/applicant/list?recruitId=${recruitBoard.recruitId}" 
											class="btn btn-primary btn-sm applicant-button" data-recruit-id="${recruitBoard.recruitId}"
											style="width: 90px; text-align: center;">
										        지원자보기
										    </a>
										</td>
									</tr>
								</c:forEach>
							</c:when>
							<c:otherwise>
								<tr>
									<td colspan="4">공고가 존재하지 않습니다.</td>
								</tr>
							</c:otherwise>
						</c:choose>
					</tbody>
				</table>
				<button class="btn btn-primary" id="registerModal" style="position: absolute; bottom: 10px; right: 10px;">
					공고 등록
				</button>
${recruitBoardList }				
			</div>
		</div>
	</section>
</div>	

<!-- 채용공고 등록 모달 -->
<div class="modal fade" id="recruitModal" tabindex="-1"	aria-labelledby="registerModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header bg-primary">
				<h5 class="modal-title" id="registerModalLabel">채용공고 작성</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"	aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="insert-form">
					<div class="mb-3">
						<label for="recruitTitle" class="form-label"><strong>제목</strong></label>
						<input type="text" class="form-control" id="recruitTitle"
							name="recruitTitle" placeholder="YYYY 부서(팀)명 직무명 채용">
					</div>
					<div class="mb-3 d-flex align-items-center">
						<div class="me-5">
							<label for="recruitWorkplace" class="form-label"><strong>근무지</strong></label>
							<input type="text" class="form-control" id="recruitWorkplace"
								name="recruitWorkplace">
						</div>
						<div>
							<label for="recruitHiretype" class="form-label"><strong>고용형태</strong></label>
							<select class="form-control" id="recruitHiretype"
								name="recruitHiretype">
								<option value="" disabled selected>선택하세요</option>
								<option value="정규직">정규직</option>
								<option value="계약직">계약직</option>
							</select>
						</div>
					</div>
					<div class="mb-3">
					    <label for="recruitSalary" class="form-label"><strong>급여</strong></label>
					    <div class="d-flex align-items-center">
					        <span class="me-2">월</span>
					        <input type="text" class="form-control" id="recruitSalary" name="recruitSalary" style="width: 80px;">
					        <span class="ms-2">만원</span>
					    </div>
					</div>
					<div class="mb-3">
						<label for="recruitWorkdetail" class="form-label"><strong>업무내용</strong></label>
						<input type="text" class="form-control" id="recruitWorkdetail"
							name="recruitWorkdetail">
					</div>
					<div class="mb-3">
						<label for="recruitPq" class="form-label"><strong>우대사항</strong></label>
						<input type="text" class="form-control" id="recruitPq"
							name="recruitPq">
					</div>
					<div class="mb-3 d-flex align-items-center">
					    <div class="me-5">
					        <label for="recruitStartdate" class="form-label"><strong>시작일</strong></label>
					        <input type="date" class="form-control" id="recruitStartdate" name="recruitStartdate">
					    </div>
					    <div>
					        <label for="recruitEnddate" class="form-label"><strong>마감일</strong></label>
					        <input type="date" class="form-control" id="recruitEnddate" name="recruitEnddate">
					    </div>
					</div>
					<div class="mb-3">
						<label for="recruitContact" class="form-label"><strong>문의처</strong></label>
						<input type="text" class="form-control" id="recruitContact"
							name="recruitContact">
					</div>
					<div class="d-flex justify-content-center">
						<button type="button" class="btn btn-primary ms-2" id="submitRecruit">등록</button>
						<button type="button" class="btn btn-secondary ms-2" data-bs-dismiss="modal" id="closeRecruitModal">
							닫기
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>
<!-- 채용공고 상세조회 모달 -->
<div class="modal fade" id="recruitDetailModal" tabindex="-1" aria-labelledby="detailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <h5 class="modal-title" id="detailModalLabel">채용공고 상세</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <tr>
                    	<th><strong>제목</strong></th>
                    	<td id="modalRecruitTitle"></td>
                    </tr>
                    <tr>
                    	<th><strong>근무지</strong></th>
                    	<td id="modalRecruitWorkplace"></td>
                    </tr>
                    <tr>
                    	<th><strong>고용형태</strong></th>
                    	<td id="modalRecruitHiretype"></td>
                    </tr>
                    <tr>
                    	<th><strong>급여</strong></th>
                    	<td id="modalRecruitSalary"></td>
                    </tr>
                    <tr>
                    	<th><strong>업무내용</strong></th>
                    	<td id="modalRecruitWorkdetail"></td>
                    </tr>
                    <tr>
                    	<th><strong>우대사항</strong></strong></th>
                    	<td id="modalRecruitPq"></td>
                    </tr>
                    <tr>
                    	<th><strong>시작일</strong></th>
                    	<td id="modalRecruitStartdate"></td>
                    </tr>
                    <tr>
                    	<th><strong>마감일</strong></th>
                    	<td id="modalRecruitEnddate"></td>
                    </tr>
                    <tr>
                    	<th><strong>문의처</strong></th>
                    	<td id="modalRecruitContact"></td>
                    </tr>
                </table>
				<div class="d-flex justify-content-center">
					<button type="button" class="btn btn-primary ms-2" id="updateRecruitBtn">수정</button>
					<button type="button" class="btn btn-secondary ms-2" data-bs-dismiss="modal" id="closeRecruitModal">
						닫기
					</button>
				</div>
            </div>
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
	
	
	
//차트
	// 공고별 지원자 수 데이터 추출
    const recruitRows = document.querySelectorAll('.recruit-row');
    let recruitData = [];

    recruitRows.forEach(row => {
    	const originalTitle = row.querySelector('.recruit-detail-link').textContent.trim();
    	
    	//공고명 축약
    	let shortTitle = originalTitle.length > 12 ? originalTitle.substring(0, 12) 
    						+ ' ~' : originalTitle;
    	
        const applicantCount = row.querySelector('.applicant-count') 
            ? parseInt(row.querySelector('.applicant-count').textContent.trim(), 10) 
            : 0;
        
        recruitData.push({ originalTitle, shortTitle, applicantCount });
    });

    // originalTitle 로 사전 순 정렬
    recruitData.sort((a, b) => a.originalTitle.localeCompare(b.originalTitle, 'ko-KR'));
    
 	// 정렬된 데이터로 차트 데이터 구성
    const recruitTitles = recruitData.map(item => item.shortTitle); // x축엔 축약된 공고명
    const applicantCounts = recruitData.map(item => item.applicantCount);
    const originalTitles = recruitData.map(item => item.originalTitle); // 툴팁에서 사용
    
    // 차트 데이터
    const chartData = {
        labels: recruitTitles, // x축엔 축약된 공고명
        datasets: [{
            label: '지원자 수',
            data: applicantCounts, // 지원자 수
            backgroundColor: 'rgba(54, 162, 235, 0.2)', // 바 차트 색
            borderColor: 'rgba(54, 162, 235, 1)', // 바 경계선 색
            borderWidth: 1
        }]
    };

    // 차트 옵션
    const chartOptions = {
        responsive: true,
        plugins: {
            legend: {
                position: 'top',
            },
            tooltip: {
                callbacks: {
                	title: function(tooltipItems) {
                        let index = tooltipItems[0].dataIndex;
                        return originalTitles[index]; // 툴팁에 원래 공고명 표시
                    },
                	
                    label: function(tooltipItem) {
                        return tooltipItem.raw + '명';
                    }
                }
            }
        },
        scales: {
        	x: {
        		ticks: {
        			autoSkip: true, // X축의 레이블이 겹치지 않도록 자동으로 건너뛰기
        			// X축 레이블에 마우스를 올리면 원래 제목이 툴팁으로 표시
        			callback: function(value, index) {
                        return recruitTitles[index]; // 기본적으로 줄인 제목 표시
                    }
        		},
                title:{
                	display: true,
                    text: '공고명'
                },
                grid: {
                    display: false // X축 실선 제거
                }
        	},
            y: {
                beginAtZero: true, // Y축 시작값을 0으로 설정
                max: 10,
                ticks: {
                	stepSize: 1, // Y축 값 정수 설정
                    callback: function(value) {
                        return value; // Y축 값 표시 방식
                    }
                },
                title:{
                	display: true,
                    text: '지원자 수'
                },
                grid: {
                    display: false // Y축 실선 제거
                }
            }
        }
    };

    // Chart.js 차트 생성
    const ctx = document.getElementById('applicantChart').getContext('2d');
    new Chart(ctx, {
        type: 'bar', // 차트 타입 (막대 그래프)
        data: chartData,
        options: chartOptions
    });
	
    
	
//모집중 & 모집마감 필터 버튼
	const today = new Date(); // 현재 날짜 객체 (시간 제외)
    today.setHours(0, 0, 0, 0); // 날짜 비교를 위해 시간 00:00:00으로 설정

    const buttons = document.querySelectorAll(".filter-button");

    buttons.forEach(button => {
        button.addEventListener("click", function () {
            // 모든 버튼을 비활성화 (btn-outline-primary로 변경)
			buttons.forEach(btn => btn.classList.replace("btn-primary", "btn-outline-primary"));

            // 현재 클릭한 버튼 활성화 (btn-primary로 변경)
            this.classList.replace("btn-outline-primary", "btn-primary");

            const status = this.dataset.status;

            document.querySelectorAll(".recruit-row").forEach(row => {
                const endDateStr = row.dataset.enddate; // 마감일 (YYYY-MM-DD)
                if (!endDateStr) return;

                const endDate = new Date(endDateStr);
                endDate.setHours(0, 0, 0, 0);

                const isRecruiting = endDate >= today;

                // 필터링 조건 적용
                if ((status === "open" && isRecruiting) || (status === "close" && endDate < today)) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        });
    });
    
    
//등록 모달 & 비동기  
	// 부트스트랩 모달 객체 생성
    const recruitModal = new bootstrap.Modal(document.getElementById("recruitModal"));

 	// 등록 버튼 클릭 시 모달창 띄우기
    document.getElementById("registerModal").addEventListener("click", function() {
        recruitModal.show();
    });

 	// 등록 처리 (비동기)
    document.getElementById("submitRecruit").addEventListener("click", function() {
    	
        const recruitData = {
            recruitTitle: document.getElementById("recruitTitle").value,
            recruitWorkplace: document.getElementById("recruitWorkplace").value,
            recruitHiretype: document.getElementById("recruitHiretype").value,
            recruitSalary: document.getElementById("recruitSalary").value,
            recruitWorkdetail: document.getElementById("recruitWorkdetail").value,
            recruitPq: document.getElementById("recruitPq").value,
            recruitStartdate: document.getElementById("recruitStartdate").value,
            recruitEnddate: document.getElementById("recruitEnddate").value,
            recruitContact: document.getElementById("recruitContact").value
        };

        axios.post("/recruit/board/registerProcess", recruitData)
            .then(response => {
                if (response.data.success) {
                    alert("채용공고가 성공적으로 등록되었습니다!");
                    recruitModal.hide();
                    location.reload(); // 새로고침하여 리스트 반영
                } else {
                    alert("등록 실패! " + response.data.message);
                }
            })
            .catch(error => {
                console.error("등록 오류:", error);
                alert("등록 중 오류가 발생했습니다.");
            });
    });
 	
//상세 조회 모달 & 비동기 
    const recruitDetailModal = new bootstrap.Modal(document.getElementById("recruitDetailModal"));
    document.body.addEventListener("click", function(event) {
        if (event.target && event.target.classList.contains("recruit-detail-link")) {
            event.preventDefault();
            const recruitId = event.target.getAttribute("data-recruit-id");
            
            console.log("클릭한 공고 ID:", recruitId);//////////////////////////////
            
            axios.get("/recruit/board/detail?recruitId=" + recruitId)
            	.then(response => {
            		
            		console.log("서버 응답 데이터:", response.data); /////////////////
            		
            		const data = response.data.recruitBoardDetail;
            		document.getElementById("modalRecruitTitle").textContent = data.recruitTitle;
                    document.getElementById("modalRecruitWorkplace").textContent = data.recruitWorkplace;
                    document.getElementById("modalRecruitHiretype").textContent = data.recruitHiretype;
                    document.getElementById("modalRecruitSalary").textContent = `월 \${data.recruitSalary} 만원`;
                    document.getElementById("modalRecruitWorkdetail").textContent = data.recruitWorkdetail;
                    document.getElementById("modalRecruitPq").textContent = data.recruitPq;
                    document.getElementById("modalRecruitEnddate").textContent = new Date(data.recruitEnddate).toLocaleDateString('en-CA');
                    document.getElementById("modalRecruitStartdate").textContent = new Date(data.recruitStartdate).toLocaleDateString('en-CA');
                    document.getElementById("modalRecruitContact").textContent = data.recruitContact;
                    
                 	// 모달에 recruitId 저장
                    document.getElementById("recruitDetailModal").setAttribute("data-recruit-id", recruitId);
                    
                    recruitDetailModal.show();
           		})
           		.catch(error => {
                    console.error("채용공고 상세 조회 오류:", error);
                    alert("채용공고를 불러오는 데 실패했습니다.");
                });
        }
    });
    
//수정 페이지로 이동    
    document.getElementById("updateRecruitBtn").addEventListener("click", function() {
        const recruitId = document.getElementById("recruitDetailModal").getAttribute("data-recruit-id");
        // 수정 페이지로 이동
        window.location.href = `/recruit/board/updateUI?recruitId=\${recruitId}`;
    });
    
    
//'지원자보기' 버튼 마우스오버시 지원자 count 표시
	document.body.addEventListener("mouseover", function(event) {
	    if (event.target.classList.contains("applicant-button")) {
	        const button = event.target;
	        const applicantCount = button.closest('td').querySelector('.applicant-count').textContent.trim();
	        button.dataset.originalText = button.textContent.trim(); // 원래 텍스트 저장
	        button.textContent = applicantCount + "명";
	    }
	});
	
	document.body.addEventListener("mouseout", function(event) {
	    if (event.target.classList.contains("applicant-button")) {
	        const button = event.target;
	        button.textContent = button.dataset.originalText; // 원래 텍스트 복원
	    }
	});

});
</script>
	