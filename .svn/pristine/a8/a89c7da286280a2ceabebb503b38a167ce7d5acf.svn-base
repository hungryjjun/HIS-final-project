package kr.or.ddit.account.service;

import java.util.Collection;

import java.util.List;

import javax.inject.Inject;
import javax.security.sasl.AuthenticationException;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.account.exception.UserNotFoundException;
import kr.or.ddit.account.vo.AccountVO;
import kr.or.ddit.employee.vo.EmployeeVO;
import kr.or.ddit.messenger.vo.ChatEmpVO;
import kr.or.ddit.mybatis.mappers.account.AccountMapper;
import kr.or.ddit.mybatis.mappers.employee.EmployeeMapper;
import kr.or.ddit.mybatis.mappers.messenger.chatempMapper;
import kr.or.ddit.security.CustomUserDetailService;
import kr.or.ddit.security.RealUserWrapper;
import lombok.extern.log4j.Log4j2;
import lombok.extern.slf4j.Slf4j;
/**
 * 
 * @author youngjun
 * @since 2025. 3. 16.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 11.     	youngjun	최초생성
 *  2025. 3. 11.     	youngjun	직원의 계정수정, 직원정보 테이블과 엮여있어 동시진행
 *
 * </pre>
 */
@Slf4j
@Service
public class AccountServiceImpl implements AccountService {

   @Autowired
   private AccountMapper mapper;
   @Autowired
   private chatempMapper chatMapper;
   @Autowired
   private EmployeeMapper empMapper;
   
    @Autowired
   private AuthenticationManagerBuilder builder;
    
    @Autowired
    private PasswordEncoder encoder;

   @Override
   public List<AccountVO> accountList() {
      return mapper.accountList();
   }

   @Override
   public boolean accountInsert(AccountVO account) {
      return mapper.accountInsert(account)>0;
   }
   
   @Override
   public AccountVO readAccount(String accountId) {
      return mapper.selectAccount(accountId);
   }
   
   @Override
   public List<AccountVO> unRegisterAccountList() {
      return mapper.findUnregisteredAccountList();
   }
   

	@Override
	public AccountVO selectedUnAccount(String empId) {
		return mapper.selectedUnAcount(empId);
	}

	@Override
	@Transactional(isolation = Isolation.READ_COMMITTED)
	public boolean updateAccount(AccountVO account, EmployeeVO employee) {
		
		boolean empEdit = mapper.updateAccountEmp(employee);
		
		if(empEdit) {
			return mapper.updateAccount(account);
		}
		
		return false;
	}
}
