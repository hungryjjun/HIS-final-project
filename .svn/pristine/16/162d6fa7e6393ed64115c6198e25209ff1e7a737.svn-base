<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
<style>
thead th {
    text-align: center !important;
}
.modal-title {
    color: white !important;
    flex-grow: 1; /* 제목이 가운데 정렬될 수 있도록 설정 */
    text-align: center;
}
.modal-header .btn-close {
    filter: invert(1); /* 아이콘 색 반전 (검정 → 흰색) */
    opacity: 1; /* 기본 부트스트랩 스타일보다 더 뚜렷하게 표시 */
}
.modal-body .list-group-item {
    border: none;  /* 테두리 제거 */
    padding: 10px 15px;
    background-color: #f9f9f9; /* 연한 배경색 */
    border-radius: 5px;
    margin-bottom: 5px;
}
.modal-body strong {
    display: inline-block;
    width: 120px; /* 라벨 너비 통일 */
    font-weight: bold;
    color: #333;
}
.radio-label {
        margin-right: 20px; /* 라디오 버튼 간격 조정 */
}
.modal.fade .modal-dialog {
    transition: transform 0.3s ease-out;
    transform: translateY(-10px);
}

.modal.show .modal-dialog {
    transform: translateY(0);
}

/* .dataTable-top 테스트 */
/* 
.dataTable-top {
	display: flex !important;
    justify-content: flex-end !important; 
}
.dataTable-top div {
    margin-left: 30px; 
}
.dataTable-dropdown label {
    margin-left: 5px !important;
}
  */
</style>

<!-- chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<h4>면접자 목록</h4>

<section class="section">
	<div class="card">
		<div class="card-header">DB연동 o</div>
		<div class="card-body">
ORDER BY RECRUIT_ID(지원공고) DESC, INTERVIEW_DATE(면접날짜) DESC<br>
<strong>평가대기 버튼을 누르면 면접자 평가 가능</strong>
<br>
			<!-- chart -->			
			<div style="display: flex; justify-content: center; align-items: center; gap: 100px; width: 100%;">
			    <div style="width: 250px; height: 250px;">
			        <canvas id="totalGenderChart"></canvas>
			    </div>
			    <div style="width: 250px; height: 250px;">
			        <canvas id="passedGenderChart"></canvas>
			    </div>
			</div>
			<!-- 성별 비율 확인용 -->
			<%-- <div>
				<c:forEach var="genderRatio" items="${totalGenderRatio}">
				    <p>총 ${genderRatio.APP_GENDER}: ${genderRatio.GENDER_COUNT}명</p>
				</c:forEach>
				<c:forEach var="genderRatio" items="${passedGenderRatio}">
				    <p>합격 ${genderRatio.APP_GENDER}: ${genderRatio.GENDER_COUNT}명</p>
				</c:forEach>
			</div> --%>
			<hr>
			<!-- 평가 필터버튼 -->
			<div class="mb-3">평가<br>
				<button class="btn btn-outline-primary filter-button" data-status="평가대기">
					대기필터
				</button>
				<button class="btn btn-outline-primary filter-button" data-status="평가완료">
					완료필터
				</button>
			</div>
			<!-- 면접자 테이블 -->
			<table class="table table-striped text-center" id="table1">
				<thead class="text-center">
					<tr>
						<th>지원공고</th>
						<th>지원자</th>
						<th>면접날짜</th>
						<th>지원서</th>
						<th>평가</th><!-- 각 행의 5번째 td(td:nth-child(5))에서 버튼의 텍스트 값을 확인하는 스크립트 존재  -->
						<th>결과</th>
					</tr>
				</thead>
				<tbody>
					<c:choose>
						<c:when test="${not empty interviewList }">
							<c:forEach items="${interviewList }" var="interview">
								<tr>
									<td>
										<a href="#" data-bs-toggle="modal" data-bs-target="#recruitModal-${interview.recruitment.recruitId}">
									        ${interview.recruitment.recruitTitle}
									    </a>
									</td>
									<td>
										appId:${interview.appId},${interview.appName}
									</td>
									<td>${fn:substringBefore(interview.applicationStatus.interviewDate, ' ')}</td>
									<td>
										<button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#applicationModal-${interview.appId}">
											열람
										</button>
									</td>
									<td>
                                        <button class="btn ${interview.applicationStatus.currentStatus == '면접예정' ? 'btn-primary' : 'btn-secondary'} btn-sm"
										    data-bs-toggle="modal" data-bs-target="#evaluationModal-${interview.appId}"
										    data-status="${interview.applicationStatus.currentStatus}">
										    <!-- data-status 속성 추가 -->
										    ${interview.applicationStatus.currentStatus == '면접예정' ? '평가대기' : '평가완료'}
										</button>
									</td>
									<td id="status-${interview.appId}">
										${interview.applicationStatus.currentStatus }
									</td>
								</tr>
							</c:forEach>
						</c:when>
						<c:otherwise>
							<tr>
								<td colspan="5" class="text-center">면접예정자가 존재하지 않습니다.</td>
							</tr>
						</c:otherwise>
					</c:choose>
				</tbody>
			</table>
${interviewList }
		</div>
	</div>
</section>
<!-- 지원서 상세 모달창 -->
<c:forEach items="${interviewList}" var="interview">
    <div class="modal fade" id="applicationModal-${interview.appId}" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary">
                    <h5 class="modal-title">지원서 상세 정보</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                <div class="container">
                <div class="card">
                <div class="card-body">
                    <ul class="list-group">
					    <li class="list-group-item"><strong>이름</strong> ${interview.appName}</li>
					    <li class="list-group-item"><strong>성별</strong> ${interview.appGender}</li>
					    <li class="list-group-item"><strong>생년월일</strong> 
					        ${fn:substring(interview.appYeardate, 0, 4)}-${fn:substring(interview.appYeardate, 4, 6)}-${fn:substring(interview.appYeardate, 6, 8)}
					    </li>
					    <li class="list-group-item"><strong>이메일</strong> ${interview.appEmail}</li>
					    <li class="list-group-item"><strong>학력</strong> ${interview.appGrade}</li>
					    <li class="list-group-item"><strong>경력</strong> 
						    <span style="white-space: pre-line; display: block;">${interview.appCareer}</span>
						</li>
					    <li class="list-group-item"><strong>자기소개서</strong> 
						    <span style="white-space: pre-line; display: block;">${interview.appPl}</span>
						</li>
					</ul>
                </div>
                </div>
                </div>
                </div>
            </div>
        </div>
    </div>
</c:forEach>
<!-- 채용 공고 상세 모달창 -->
<c:forEach items="${interviewList}" var="interview">
    <div class="modal fade" id="recruitModal-${interview.recruitment.recruitId}" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary">
                    <h5 class="modal-title">채용 공고 상세 정보</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                <div class="container">
                <div class="card">
                <div class="card-body">
                    <ul class="list-group">
					    <li class="list-group-item"><strong>공고제목</strong> ${interview.recruitment.recruitTitle}</li>
					    <li class="list-group-item"><strong>근무지</strong> ${interview.recruitment.recruitWorkplace}</li>
					    <li class="list-group-item"><strong>고용형태</strong> ${interview.recruitment.recruitHiretype}</li>
					    <li class="list-group-item"><strong>급여</strong> ${interview.recruitment.recruitSalary}</li>
					    <li class="list-group-item"><strong>모집부서</strong> ${interview.recruitment.recruitPosition}</li>
					    <li class="list-group-item"><strong>업무내용</strong> ${interview.recruitment.recruitWorkdetail}</li>
					    <li class="list-group-item"><strong>우대사항</strong> ${interview.recruitment.recruitPq}</li>
					    <li class="list-group-item"><strong>모집기간</strong> 
					        <fmt:formatDate value="${interview.recruitment.recruitStartdate}" pattern="yyyy-MM-dd" />
					        ~ <fmt:formatDate value="${interview.recruitment.recruitEnddate}" pattern="yyyy-MM-dd" />
					    </li>
					    <li class="list-group-item"><strong>문의처</strong> ${interview.recruitment.recruitContact}</li>
					</ul>
                </div>
                </div>
                </div>
                </div>
            </div>
        </div>
    </div>
</c:forEach>
<!-- 평가 모달창 -->
<c:forEach items="${interviewList}" var="interview">
    <div class="modal fade" id="evaluationModal-${interview.appId}" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">면접 평가 - ${interview.appName}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="evaluationForm-${interview.appId}">
App ID: ${interview.appId}
Status ID: ${interview.applicationStatus.statusId}
                        <ul class="list-group">
						    <li class="list-group-item">
							    <label class="form-label"><strong>전문지식</strong></label>
							    <div>
							        <input type="radio" name="evalKnow" value="미흡" ${interview.applicationStatus.evalKnow == '미흡' ? 'checked' : ''}>미흡&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalKnow" value="보통" ${interview.applicationStatus.evalKnow == '보통' ? 'checked' : ''}>보통&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalKnow" value="우수" ${interview.applicationStatus.evalKnow == '우수' ? 'checked' : ''}>우수&nbsp;&nbsp;&nbsp;
							    </div>
							</li>
						    <li class="list-group-item">
							    <label class="form-label"><strong>기술역량</strong></label>
							    <div>
							        <input type="radio" name="evalSkill" value="미흡" ${interview.applicationStatus.evalSkill == '미흡' ? 'checked' : ''}>미흡&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalSkill" value="보통" ${interview.applicationStatus.evalSkill == '보통' ? 'checked' : ''}>보통&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalSkill" value="우수" ${interview.applicationStatus.evalSkill == '우수' ? 'checked' : ''}>우수&nbsp;&nbsp;&nbsp;
							    </div>
							</li>
						    <li class="list-group-item">
							    <label class="form-label"><strong>태도</strong></label>
							    <div>
							        <input type="radio" name="evalAtti" value="미흡" ${interview.applicationStatus.evalAtti == '미흡' ? 'checked' : ''}>미흡&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalAtti" value="보통" ${interview.applicationStatus.evalAtti == '보통' ? 'checked' : ''}>보통&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalAtti" value="우수" ${interview.applicationStatus.evalAtti == '우수' ? 'checked' : ''}>우수&nbsp;&nbsp;&nbsp;
							    </div>
							</li>
						    <li class="list-group-item">
							    <label class="form-label"><strong>커뮤니케이션</strong></label>
							    <div>
							        <input type="radio" name="evalCommu" value="미흡" ${interview.applicationStatus.evalCommu == '미흡' ? 'checked' : ''}>미흡&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalCommu" value="보통" ${interview.applicationStatus.evalCommu == '보통' ? 'checked' : ''}>보통&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalCommu" value="우수" ${interview.applicationStatus.evalCommu == '우수' ? 'checked' : ''}>우수&nbsp;&nbsp;&nbsp;
							    </div>
							</li>
						    <li class="list-group-item">
							    <label class="form-label"><strong>경험</strong></label>
							    <div>
							        <input type="radio" name="evalExperi" value="미흡" ${interview.applicationStatus.evalExperi == '미흡' ? 'checked' : ''}>미흡&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalExperi" value="보통" ${interview.applicationStatus.evalExperi == '보통' ? 'checked' : ''}>보통&nbsp;&nbsp;&nbsp;
							        <input type="radio" name="evalExperi" value="우수" ${interview.applicationStatus.evalExperi == '우수' ? 'checked' : ''}>우수&nbsp;&nbsp;&nbsp;
							    </div>
							</li>
						</ul>
                        <div class="mt-3">
						    <label class="form-label"><strong>면접 결과:</strong></label>
						    <div>
						        <input type="radio" name="currentStatus" value="합격"
						            ${interview.applicationStatus.currentStatus == '합격' ? 'checked' : ''}>합격&nbsp;&nbsp;&nbsp;
						        <input type="radio" name="currentStatus" value="불합격"
						            ${interview.applicationStatus.currentStatus == '불합격' ? 'checked' : ''}>불합격&nbsp;&nbsp;&nbsp;
						    </div>
						</div>
                        <div class="d-flex justify-content-center">
	                        <button type="button" class="btn btn-primary ms-2" id="submitEvaluation-${interview.appId}"
							    onclick="submitEvaluation('${interview.appId}', '${interview.applicationStatus.statusId}')"
							    ${interview.applicationStatus.currentStatus == '합격' || interview.applicationStatus.currentStatus == '불합격' ? 'disabled' : ''}>
							    <c:choose>
							        <c:when test="${interview.applicationStatus.currentStatus == '합격' || interview.applicationStatus.currentStatus == '불합격'}">
							            평가 완료
							        </c:when>
							        <c:otherwise>
							            평가 제출
							        </c:otherwise>
							    </c:choose>
							</button>
	                        <button type="button" class="btn btn-secondary ms-2" data-bs-dismiss="modal" aria-label="Close">
	                            닫기
	                        </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</c:forEach>

<script>


////////////////////////// 평가완료 모달 라디오버튼 비활성화 스크립트  //////////////////////////////////

// 아직 평가제출 후 닫힌 모달창을 새로고침 없이 열었을때 '면접예정' 상태라 라디오버튼이 해제되어있는 문제 남아있음....

document.body.addEventListener("click", function(event) {
    // 클릭된 요소가 데이터 속성 data-bs-target이 '#evaluationModal'로 시작하는 버튼인지 확인
    if (event.target.matches("[data-bs-target^='#evaluationModal']")) {

        let button = event.target;
        let appId = button.getAttribute("data-bs-target").replace("#evaluationModal-", ""); // appId 추출
        let status = button.getAttribute("data-status"); // 면접 상태 가져오기
		console.log("Status: " + status); // status = 합격/불합격/면접예정

        let modal = document.querySelector("#evaluationModal-" + appId);
        if (!modal) return;

        let radioButtons = modal.querySelectorAll("input[type='radio']");

        if (status === "합격" || status === "불합격" || status === "평가완료") {
            radioButtons.forEach(radio => radio.disabled = true);
        } else {
            radioButtons.forEach(radio => radio.disabled = false);
        }
    }
});

 



////////////  필터 스크립트  //////////

// 필터 변수 선언. 현재 적용된 필터 저장
	let activeFilter = null;
	
// 필터 적용 함수
	function applyFilter() {
	    if (!activeFilter) return; // 필터가 설정되지 않았다면 종료
	
	    // 전체 행 가져오고 모든 행을 보이게 초기화
	    const rows = document.querySelectorAll('#table1 tbody tr');
	    rows.forEach(row => {
	        row.style.display = ''; 
	    });
	
	    // 각 행의 5번째 td에서 버튼의 텍스트 값을 확인
	    rows.forEach(row => {
	        const statusButton = row.querySelector('td:nth-child(5) button');
	        const currentStatus = statusButton ? statusButton.innerText.trim() : '';
	
	     	// 필터 조건에 맞는 행만 표시하고 나머지는 숨기기
	        if (activeFilter !== currentStatus) {
	            row.style.display = 'none';
	        }
	    });
	}

//필터 버튼 클릭 이벤트 (기존 코드 수정)
	document.querySelectorAll('.filter-button').forEach(button => {
	    button.addEventListener('click', function () {
	        activeFilter = this.dataset.status; // 클릭된 버튼의 필터 값 저장
	        applyFilter(); // 필터 적용
	        
	     	// 모든 버튼을 btn-outline-primary로 변경
	        document.querySelectorAll('.filter-button').forEach(btn => {
	            btn.classList.replace("btn-primary", "btn-outline-primary");
	        });
	        // 클릭한 버튼을 btn-primary로 변경
	        this.classList.replace("btn-outline-primary", "btn-primary");
	        
	    });
	});



//////////// 파이차트 스크립트   //////////////

	let passedGenderChart = null;

//총 지원자 성별 파이차트
	//JSP 데이터를 JavaScript 배열로 변환
	const totGenderLabels = [];
	const totGenderData = [];
	const backgroundColors = [];
	
	<c:forEach var="genderRatio" items="${totalGenderRatio}">
		totGenderLabels.push("${genderRatio.APP_GENDER}");		// 문자열 "남자/여자"사용
		totGenderData.push(${genderRatio.GENDER_COUNT});		// 숫자 "" 사용x
		
		// 성별에 따라 색상 지정
	    if ("${genderRatio.APP_GENDER}" === "남자") {
	        backgroundColors.push("#36A2EB"); // 파란색 (남자)
	    } else {
	        backgroundColors.push("#FF6384"); // 빨간색 (여자)
	    } 
	</c:forEach>
	
	// 총 지원자 수 계산
	const totalApplicants = totGenderData.reduce((sum, count) => sum + count, 0);
	
	const ctx1 = document.getElementById('totalGenderChart').getContext('2d');
	new Chart(ctx1, {
		type: 'pie',
		data: {
		    labels: totGenderLabels,
		    datasets: [{
		        label: '총 지원자 성별 비율',
		        data: totGenderData,
		        backgroundColor: backgroundColors,
		        hoverOffset: 4
		    }]
		},
		options: {
		    responsive: true,
		    plugins: {
		        legend: {
		            position: 'top',
		        },
		        title: {
		            display: true,
		            text: '총 지원자 성별 비율'
		        },
		        tooltip: {
	                callbacks: {
	                    label: function(tooltipItem) {
	                        let value = tooltipItem.raw; // 해당 조각의 지원자 수
	                        let percentage = ((value / totalApplicants) * 100).toFixed(1); // 백분율 계산
	                        return `\${percentage}%`; // n% 형식으로 출력
	                    }
	                }
	            }
		    }
		}
	});

//합격자 성별 파이차트	
	//JSP 데이터를 JavaScript 배열로 변환
	const passGenderLabels = [];
	const passGenderData = [];
	const pbackgroundColors = [];
	
	<c:forEach var="genderRatio" items="${passedGenderRatio}">
		passGenderLabels.push("${genderRatio.APP_GENDER}");		// 문자열 "남자/여자"사용
		passGenderData.push(${genderRatio.GENDER_COUNT});		// 숫자 "" 사용x
		
		// 성별에 따라 색상 지정
	    if ("${genderRatio.APP_GENDER}" === "남자") {
	        pbackgroundColors.push("#36A2EB"); // 파란색 (남자)
	    } else {
	        pbackgroundColors.push("#FF6384"); // 빨간색 (여자)
	    } 
	</c:forEach>
	
	// 합격자 수 계산
	const passApplicants = passGenderData.reduce((sum, count) => sum + count, 0);

	const ctx2 = document.getElementById('passedGenderChart').getContext('2d');
	new Chart(ctx2, {
		type: 'pie',
		data: {
		    labels: passGenderLabels,
		    datasets: [{
		        label: '합격자 성별 비율',
		        data: passGenderData,
		        backgroundColor: pbackgroundColors,
		        hoverOffset: 4
		    }]
		},
		options: {
		    responsive: true,
		    plugins: {
		        legend: {
		            position: 'top',
		        },
		        title: {
		            display: true,
		            text: '합격자 성별 비율'
		        },
		        tooltip: {
	                callbacks: {
	                    label: function(tooltipItem) {
	                        let value = tooltipItem.raw; // 해당 조각의 합격자 수
	                        let percentage = ((value / passApplicants) * 100).toFixed(1); // 백분율 계산
	                        return `\${percentage}%`; // n% 형식으로 출력
	                    }
	                }
	            }
		    }
		}
	});

///////// 합격자 파이차트 비동기 갱신 스크립트 ////////////
//
// 합격자 성별 비율 차트 갱신 함수
	async function fetchPassedGenderRatio() {
	    try {
	        const response = await axios.get('/recruit/interview/passedGenderRatio');
	        updatePassedGenderChart(response.data); // 서버에서 받은 데이터를 차트 갱신에 사용
	    } catch (error) {
	        console.error("Error fetching passed gender ratio:", error);
	    }
	}

// 차트 갱신 함수
	function updatePassedGenderChart(passedGenderRatio) {
	    const passGenderLabels = [];
	    const passGenderData = [];
	    const pbackgroundColors = [];
	
	    passedGenderRatio.forEach(genderRatio => {
	        passGenderLabels.push(genderRatio.APP_GENDER);
	        passGenderData.push(genderRatio.GENDER_COUNT);
	        
	        // 성별에 따라 색상 지정
	        if (genderRatio.APP_GENDER === "남자") {
	            pbackgroundColors.push("#36A2EB"); // 파란색 (남자)
	        } else {
	            pbackgroundColors.push("#FF6384"); // 빨간색 (여자)
	        }
	    });
	
	    const passApplicants = passGenderData.reduce((sum, count) => sum + count, 0);
	    
	    const canvas = document.getElementById('passedGenderChart');
	    
	    // 기존 차트가 있으면 제거
	    if (Chart.getChart(canvas)) {
	        Chart.getChart(canvas).destroy();
	    }
	    
	    // 캔버스 컨텍스트 다시 가져오기
	    const ctx2 = canvas.getContext('2d');
	    
	 	// 새 차트 생성
	    passedGenderChart = new Chart(ctx2, {
	        type: 'pie',
	        data: {
	            labels: passGenderLabels,
	            datasets: [{
	                label: '합격자 성별 비율',
	                data: passGenderData,
	                backgroundColor: pbackgroundColors,
	                hoverOffset: 4
	            }]
	        },
	        options: {
	            responsive: true,
	            plugins: {
	                legend: {
	                    position: 'top',
	                },
	                title: {
	                    display: true,
	                    text: '합격자 성별 비율'
	                },
	                tooltip: {
	                    callbacks: {
	                        label: function(tooltipItem) {
	                            let value = tooltipItem.raw; // 해당 조각의 합격자 수
	                            let percentage = ((value / passApplicants) * 100).toFixed(1); // 백분율 계산
	                            return `\${percentage}%`; // n% 형식으로 출력
	                        }
	                    }
	                }
	            }
	        }
	    });
	}
	
//////////////// 평가 제출 스크립트 /////////////////
	async function submitEvaluation(appId, statusId) {
	    try {
	    	// 현재 모달 내에서만 라디오 버튼 값 찾기
	        const modal = document.querySelector("#evaluationModal-" + appId);
	        if (!modal) {
	            alert("모달을 찾을 수 없습니다.");
	            return;
	        }
	    	
	    	// 선택된 라디오 버튼의 값 가져오기(선택하지 않으면 null)
	        const getCheckedValue = (name) => {
	            return modal.querySelector("input[name='" + name + "']:checked")?.value || null;
	        };
	        
	     	// 필수 평가 항목 목록
	        const requiredFields = ["evalKnow", "evalSkill", "evalAtti", "evalCommu", "evalExperi", "currentStatus"];
	        
	        // 모든 항목이 선택되었는지 확인
	        for (let field of requiredFields) {
	            if (!getCheckedValue(field)) {
	                alert("모든 항목을 선택해야 제출 가능합니다.");
	                return; // 제출 중단
	            }
	        }
	        
	    	// 사용자에게 제출 확인 메시지 표시
	        const isConfirmed = confirm("제출한 평가는 수정할 수 없습니다. 제출하시겠습니까?");
	        if (!isConfirmed) {
	            return; // 취소 시 함수 종료
	        }
	        
	        // 평가 데이터
	        const evaluationData = {
	                appId: appId,
	                statusId: statusId,
	                evalKnow: getCheckedValue("evalKnow"),
	                evalSkill: getCheckedValue("evalSkill"),
	                evalAtti: getCheckedValue("evalAtti"),
	                evalCommu: getCheckedValue("evalCommu"),
	                evalExperi: getCheckedValue("evalExperi"),
	                currentStatus: getCheckedValue("currentStatus")
	            };
	        console.log("Evaluation Data: ", evaluationData);
	        
	
	        // 서버에 평가 데이터 전송
	        let response = await axios.post('/recruit/interview/update', evaluationData);
			console.log("Server Response: ", response.data);
	        
	        if (response.data.success) {
				console.log("Update successful, updating UI...");
	
	            // 모달 요소 찾기
	            let modalElement = document.getElementById("evaluationModal-" + appId);
				console.log("Modal Element: ", modalElement);
	            
	            // 결과 td 갱신
			    let statusElement = document.getElementById("status-" + appId);
				console.log("Status Element: ", statusElement)
			    if (statusElement) {
			        statusElement.innerText = evaluationData.currentStatus;
			        console.log("Status updated to: " + evaluationData.currentStatus);
			    } else {
			    	console.error("Status element not found for appId: " + appId);
	       		}
				
				// 평가 버튼 갱신 
				let evalButton = document.querySelector("#table1 button[data-bs-target='#evaluationModal-" + appId + "']");
				if (evalButton) {
				    evalButton.innerText = "평가완료";
				    evalButton.classList.remove("btn-primary");
				    evalButton.classList.add("btn-secondary");
				} else {
				    console.error("Evaluation button not found for appId: " + appId);
				}
				    
				// 제출 버튼 비활성화
				let submitButton = document.getElementById('submitEvaluation-' + appId);
				if(submitButton){
					submitButton.innerText = "평가 완료";
					submitButton.disabled = true;
				} else {
					console.error("Submit button not found for appId: " + appId);
				}
				
				// 라디오 버튼 비활성화
				let radioButtons = modal.querySelectorAll("input[type='radio']");
            	radioButtons.forEach(radio => radio.disabled = true);
				
	         	// 합격자 성별 비율 차트 갱신 
	            fetchPassedGenderRatio();
	         	
	         	// 일정 시간 후 필터 재적용하여 필터 목록 갱신 
	         	setTimeout(() => {
	         		applyFilter();
	         	}, 2000);
	         	
	         	
	            alert("평가 결과가 제출되었습니다.");
	        } else {
	            alert("제출 실패: " + response.data.message);
	        }
	        
	    } catch (error) {
	        console.error("Error occurred: ", error);
	        alert("오류 발생");
	    }
	}



</script>

