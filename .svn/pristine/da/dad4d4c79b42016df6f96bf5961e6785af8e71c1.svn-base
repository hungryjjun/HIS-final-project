/**
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 * 2025. 3. 21.     	CHOI            최초 생성
 *
 * </pre>
 */

/**
 * 템플릿(HTML 양식) 불러오기 + 데이터 자동 삽입
 */
async function loadTemplate(templateId) {
    try {
        const response = await axios.get(`/approval/template/${templateId}`);
        const file = response.data;

        if (!file.detailId) {
            throw new Error("detailId가 존재하지 않습니다.");
        }

        let filePath = `/file/download/${file.detailId}`;

        console.log(" 다운로드할 파일 경로:", filePath); // 디버깅용

        // ✅ 다운로드 버튼에 링크 설정
        const downloadBtn = document.getElementById("downloadButton");
        if (downloadBtn) {
            downloadBtn.setAttribute("href", filePath);
            downloadBtn.setAttribute("download", `template_${templateId}.html`);
        }

        // HTML 파일 다운로드 및 파싱
        const htmlResponse = await axios.get(filePath);
        console.log(" 불러온 HTML:", htmlResponse.data); // 디버깅용 콘솔 출력

        // 다운로드된 HTML을 DOM으로 변환
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlResponse.data, "text/html");

        const formElement = doc.querySelector("form");
        if (!formElement) {
            throw new Error(" 불러온 HTML에 <form> 태그가 없습니다.");
        }

        // 모달 내부 컨테이너에 HTML 삽입
        document.getElementById("approvalFormContainer").innerHTML = doc.body.innerHTML;


		//CKEditor 재초기화
		reinitializeCKEditor();
        // 데이터 채우기
        await fillFormData(templateId);

        // 폼 초기화 (이벤트 리스너 등 추가)
        initApprovalForm();

    } catch (error) {
        console.error("템플릿 로드 오류:", error);
        alert("템플릿을 불러오는 중 오류가 발생했습니다: " + error.message);
    }
}

/**
 * 폼 관련 초기화 (이벤트 바인딩 등)
 */
function initApprovalForm() {
    // 예시: 상신 버튼 클릭 이벤트
    document.querySelector("#submitApprovalBtn").addEventListener("click", function () {
        alert("상신 버튼 클릭");
        // 상신 처리 로직 추가
    });
}

/**
 * 불러온 HTML 템플릿 내부의 데이터를 자동으로 채우기
 */
async function fillFormData(templateId) {
    try {
        const response = await axios.get(`/approval/draft/data/${templateId}`);
        const draftData = response.data;

        console.log("불러온 기안 데이터:", draftData);

        // input, textarea, select를 순회하며 draftData 매핑
        document.querySelectorAll("#approvalFormContainer input, #approvalFormContainer textarea, #approvalFormContainer select")
            .forEach(field => {
                const name = field.getAttribute("name");
                if (name && draftData.hasOwnProperty(name)) {
                    if (field.type === "checkbox") {
                        field.checked = draftData[name] === true || draftData[name] === "Y";
                    } else if (field.type === "date") {
                        field.value = draftData[name] ? draftData[name].split("T")[0] : "";
                    } else {
                        field.value = draftData[name];
                    }
                }
            });

        // CKEditor 내용 삽입 (templateContent 필드를 사용한다고 가정)
        if (draftData.templateContent && CKEDITOR.instances) {
            // draftContent id를 가진 textarea만 사용한다면:
            if (CKEDITOR.instances['draftContent']) {
                CKEDITOR.instances['draftContent'].setData(draftData.templateContent);
            }
        }

        // 기안자와 문서번호 자동 채우기
        document.querySelector("input[name='draftId']").value = draftData.draftId || "";
        document.querySelector("input[name='docNo']").value = draftData.docNo || "";

    } catch (error) {
        console.error("문서 데이터 로드 실패:", error);
        alert("문서 데이터를 불러오는 데 실패했습니다.");
    }
}

/**
 * 모달 내부에 동적 HTML 삽입 후, CKEditor 재초기화 함수
 */
function reinitializeCKEditor() {
    // 모달 내의 모든 textarea를 순회
    document.querySelectorAll("#approvalFormContainer textarea").forEach((textarea, idx) => {
        // 고유 id가 없으면 할당 (예: draftContent_1, draftContent_2, ...)
        if (!textarea.id) {
            textarea.id = "draftContent_" + idx;
        }
        // 기존 인스턴스가 있으면 destroy
        if (CKEDITOR.instances[textarea.id]) {
            CKEDITOR.instances[textarea.id].destroy(true);
        }
        // 새 CKEditor 인스턴스 생성
        CKEDITOR.replace(textarea.id, { versionCheck: false });
    });
}



/**
 * `상신` 버튼 이벤트 리스너 추가
 */
document.addEventListener("DOMContentLoaded", function () {
    document.querySelector("#submitApprovalBtn").addEventListener("click", submitApprovalForm);
});
