package kr.or.ddit.spring.config;


import javax.servlet.http.HttpSession;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import kr.or.ddit.account.vo.AccountVO;
import kr.or.ddit.messenger.service.ChatEmpService;
import lombok.extern.slf4j.Slf4j;

/**
 * 
 * @author youngjun
 * @since 2025. 3. 12.
 * @see
 *
 * <pre>
 * << Í∞úÏ†ïÏù¥Î†•(Modification Information) >>
 *   
 *   ÏàòÏ†ïÏùº      			ÏàòÏ†ïÏûê           ÏàòÏ†ïÎÇ¥Ïö©
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 12.     	youngjun	          ÏµúÏ¥à ÏÉùÏÑ±
 *
 * </pre>
 */
@Configuration
@EnableWebSecurity
@Slf4j
public class SecurityConfig {

    private final ChatEmpService chatEmpService; // ‚úÖ finalÎ°ú Î≥ÄÍ≤Ω

    public SecurityConfig(ChatEmpService chatEmpService) {
        this.chatEmpService = chatEmpService;
    }

    @Bean 
    public PasswordEncoder passwordEncoder() {
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(customizer -> customizer.disable())
            .authorizeHttpRequests(authorize -> authorize.anyRequest().permitAll())
            .formLogin(customizer ->
                customizer.loginPage("/account/login/main")
                          .loginProcessingUrl("/account/login")
                          .usernameParameter("accountId")
                          .passwordParameter("password")
                          .permitAll()
            )
            .logout(customizer ->
                customizer
                    .logoutUrl("/account/login/logout")
                    .addLogoutHandler((request, response, authentication) -> {
                        log.info("üî¥ Î°úÍ∑∏ÏïÑÏõÉ Ìï∏Îì§Îü¨ Ïã§ÌñâÎê®!");

                        HttpSession session = request.getSession(false);
                        if (session != null) {
                            AccountVO account = (AccountVO) session.getAttribute("sessionAccount");
                            if (account != null) {
                                log.info("üî¥ Î°úÍ∑∏ÏïÑÏõÉ - empId: {}, ÏÉÅÌÉú Î≥ÄÍ≤Ω -> Ïò§ÌîÑÎùºÏù∏", account.getEmpId());
                                chatEmpService.updateEmpStatus(account.getEmpId(), "Ïò§ÌîÑÎùºÏù∏");
                            } else {
                                log.warn("‚ö†Ô∏è ÏÑ∏ÏÖòÏóêÏÑú Í≥ÑÏ†ï Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌï®!");
                            }
                        } else {
                            log.warn("‚ö†Ô∏è ÏÑ∏ÏÖòÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå!");
                        }
                    })
                    .logoutSuccessHandler((request, response, authentication) -> {
                        log.info("üîµ Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µ! ÌôàÏúºÎ°ú Ïù¥Îèô");
                        response.sendRedirect("/");
                    })
            )
            .sessionManagement(session ->
                session.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
                       .maximumSessions(1)
                       .expiredUrl("/account/login/logout?expired")
            );

        return http.build();
    }


}





