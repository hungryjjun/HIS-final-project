<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 * == 개정이력(Modification Information) ==
 *   
 *   수정일               수정자           수정내용
 *  ============      ============== =======================
 *  2025. 3. 12.        young            최초 생성
 *  2025. 3. 13.        jtw              AccountVO에 EmployeeVO안의 AttendanceList 매핑
 *  2025. 3. 14.        태우                 team member 매핑
 *  2025. 3. 16.        young            account, employee 업데이트 
 *  2025. 3. 21.        영규                passwordReset 추가 
-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.mybatis.mappers.account.AccountMapper">

<resultMap type="accountVO" id="accountMap" autoMapping="true">
      <association property="department" javaType="DepartmentVO" autoMapping="true"/>
      <association property="role" javaType="RoleVO" autoMapping="true"/>
      <association property="employee" javaType="EmployeeVO" autoMapping="true">
         <collection property="attendanceList" ofType="AttendanceVO">
            <id property="attendanceId" column="attendance_id" />
            <result property="workStartTime" column="WORK_STARTTime" />
            <result property="workEndTime" column="WORK_ENDTime" />
            <result property="workingHours" column="WORKING_HOURS" />
            <result property="attendanceStatus" column="ATTENDANCE_STATUS" />
         </collection>
      </association>
      <association property="job" javaType="JobVO" autoMapping="true"/>
      <association property="rank" javaType="RankVO" autoMapping="true"/>
      <association property="teamMember" javaType="TeamMemberVO" autoMapping="true">
         <association property="team" javaType="TeamVO" autoMapping="true"/>
      </association>
      <association property="passwordReset" javaType="PasswordResetVO" autoMapping="true"/>
</resultMap>

<select id="accountList" resultMap="accountMap">
   SELECT A.ACCOUNT_ID,
       A.EMP_NAME,
       D.DEPARTMENT_NAME,
       R.RANK_NAME,
       J.JOB_NAME,
       E.HIRE_DATE,
       E.EMAIL,
       A.ACCOUNT_DATE,
       A.ACCOUNT_DEL,
       A.ACCOUNT_STATUS,
       RO.ROLE_NAME
FROM EMPLOYEE E
LEFT JOIN ACCOUNT A ON E.EMP_ID = A.EMP_ID
LEFT JOIN DEPARTMENT D ON D.DEPARTMENT_ID = A.DEPARTMENT_ID
LEFT JOIN JOB J ON J.JOB_ID = A.JOB_ID
LEFT JOIN RANK R ON E.RANK_ID = R.RANK_ID
LEFT JOIN ROLE RO ON A.ROLE_ID = RO.ROLE_ID
WHERE ACCOUNT_ID = ACCOUNT_ID
</select>

<!--  메인화면 근태시간 표시하려면 attendance필요함 !! ㅋㅋ -->
<select id="selectAccount" parameterType="string" resultMap="accountMap">
    SELECT 
    a.ACCOUNT_ID,
    a.tm_id,
    a.emp_id,
    a.password,
    a.department_id,
    d.department_name,
    a.job_id,
    a.emp_name,
    a.role_id,
    a.account_status,
    a.account_date,
    a.account_del,
    a.account_update,
    T.team_name,
    NVL(TO_CHAR(at.WORK_DATE, 'yyyy-MM-dd'), '') AS WORK_DATE, 
    NVL(TO_CHAR(at.WORK_STARTTime, 'HH24:MI:SS'), '') AS WORK_STARTTime, 
    NVL(TO_CHAR(at.WORK_ENDTime, 'HH24:MI:SS'), '') AS WORK_ENDTime, 
    NVL(at.WORKING_HOURS, 0) AS WORKING_HOURS, 
    NVL(at.ATTENDANCE_STATUS, '미출근') AS ATTENDANCE_STATUS, 
    NVL(at.STATUS_ID, '-') AS STATUS_ID,
   r.rank_id,
   r.rank_name,
   e.EMAIL,
   e.JUMIN_FRONT,
   e.ADDRESS,
    e.ADDRESS_DETAIL,
    e.PHONE_NUMBER
FROM ACCOUNT a
LEFT JOIN attendance at  ON a.emp_id = at.emp_id 
 AND TO_CHAR(at.WORK_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')  
LEFT JOIN DEPARTMENT d  ON d.DEPARTMENT_ID = a.DEPARTMENT_ID
LEFT JOIN TEAM_MEMBER TM ON TM.TM_ID = a.TM_ID
LEFT JOIN TEAM T ON T.TEAM_ID = TM.TEAM_ID
LEFT JOIN EMPLOYEE E ON E.emp_id = a.emp_id
LEFT JOIN RANK R ON R.rank_id = E.rank_id
WHERE a.ACCOUNT_ID = #{accountId}
ORDER BY at.WORK_STARTTime DESC

</select>

<!-- 계정에 등록되어 있지 않은 직원리스트 뽑기 -->
<select id="selectedUnAcount" parameterType="string" resultMap="accountMap">
   SELECT
       E.EMP_ID,
       E.NAME,
       D.DEPARTMENT_NAME,
       T.TEAM_NAME,
       R.RANK_NAME,
       J.JOB_NAME,
       E.HIRE_DATE,
       E.EMAIL,
       E.PHONE_NUMBER,
       E.ADDRESS,
       E.ADDRESS_DETAIL,
       TM.TM_ID,
       T.TEAM_ID,
       J.JOB_ID,
       D.DEPARTMENT_ID
FROM EMPLOYEE E
LEFT JOIN ACCOUNT A ON E.EMP_ID = A.EMP_ID
LEFT JOIN DEPARTMENT D ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
LEFT JOIN JOB J ON J.JOB_ID = E.JOB_ID
LEFT JOIN RANK R ON E.RANK_ID = R.RANK_ID
LEFT JOIN TEAM T ON T.TEAM_ID = E.TM_ID
LEFT JOIN TEAM_MEMBER TM ON TM.TM_ID=E.TM_ID
WHERE E.EMP_ID = #{empId}
</select>

<select id="findUnregisteredAccountList" resultMap="accountMap">
 SELECT 
       E.EMP_ID,
       E.NAME,  
       D.DEPARTMENT_NAME,
       R.RANK_NAME,
       J.JOB_NAME,
       E.HIRE_DATE,
       E.EMAIL
FROM EMPLOYEE E
LEFT JOIN ACCOUNT A ON E.EMP_ID = A.EMP_ID
LEFT JOIN DEPARTMENT D ON D.DEPARTMENT_ID = COALESCE(TO_NUMBER(A.DEPARTMENT_ID), E.DEPARTMENT_ID) 
LEFT JOIN JOB J ON J.JOB_ID = COALESCE(TO_NUMBER(A.JOB_ID), E.JOB_ID) 
LEFT JOIN RANK R ON E.RANK_ID = R.RANK_ID
WHERE A.EMP_ID IS NULL
   
</select>

<insert id="accountInsert">
INSERT INTO account (
    account_id
    , emp_id
    , password
    , department_id
    , job_id
    , emp_name
    , account_email
    , account_add1
    , account_add2
    , account_ph
) VALUES ( 
          #{accountId}
         , #{empId}
         , #{password}
         , #{departmentId}
         , #{jobId}
         , #{empName}
         , #{accountEmail}
         , #{accountAdd1}
         , #{accountAdd2}
         , #{accountPh}
          )       
</insert>

<update id="updateAccount">
    UPDATE ACCOUNT
    <set>
        <if test="accountEmail != null"> ACCOUNT_EMAIL = #{accountEmail}, </if>
        <if test="accountPh != null"> ACCOUNT_PH = #{accountPh}, </if>
        <if test="accountAdd1 != null"> ACCOUNT_ADD1 = #{accountAdd1}, </if>
        <if test="accountAdd2 != null"> ACCOUNT_ADD2 = #{accountAdd2}, </if>
        <if test="tmId != null"> TM_ID = #{tmId}, </if>
        DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEE WHERE EMP_ID = #{empId}),
        ACCOUNT_UPDATE = sysdate
    </set>
    WHERE EMP_ID = #{empId}
</update>

<update id="updateAccountEmp">
    UPDATE EMPLOYEE
    <set>
        <if test="rankId != null">RANK_ID = #{rankId},</if>
        <if test="empImg != null">EMP_IMG = #{empImg},</if>
        <if test="empStatus != null">EMP_STATUS = #{empStatus},</if>
        <if test="departmentId != null">DEPARTMENT_ID = #{departmentId},</if>
        EMP_ID = EMP_ID 
    </set>
    WHERE EMP_ID = #{empId}
</update>
   <insert id="insertPasswordReset" parameterType="PasswordResetVO">
      INSERT INTO PASSWORD_RESET(
          TOKEN 
         ,ACCOUNT_ID
         ,EXPIRATION_DATE
      )VALUES(
          #{token}
         ,#{accountId}
         ,#{expirationDate}         
      )   
   </insert>
   
   <select id="selectPasswordReset" parameterType="string" resultType="PasswordResetVO">
    SELECT TOKEN, ACCOUNT_ID, EXPIRATION_DATE
    FROM PASSWORD_RESET
    WHERE TOKEN = #{token}
   </select>

    <delete id="deletePasswordReset" parameterType="string">
       DELETE FROM PASSWORD_RESET
       WHERE TOKEN = #{token}
   </delete>

   <delete id="deleteExpired" parameterType="java.util.Date">
       DELETE FROM PASSWORD_RESET
       WHERE EXPIRATION_DATE &lt; #{now}
   </delete>
   
   <update id="updateAccountPassword">
    UPDATE ACCOUNT
    SET PASSWORD = #{password},
        ACCOUNT_UPDATE = SYSDATE
    WHERE ACCOUNT_ID = #{accountId}
   </update>
   
   <select id="accountfindEmail" resultType="string">
   SELECT ACCOUNT_EMAIL
   FROM ACCOUNT
   WHERE ACCOUNT_ID =#{accountId}
   
   </select>
</mapper>

